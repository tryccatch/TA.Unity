---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Admin.
--- DateTime: 2021/7/7 11:15
---
local class = {
}

local controller = nil

---@param ctr [catchAssailant]
function class:init(root, ctr)
    self.root = root
    controller = ctr
    UI.button(self.root, "btnClose", function()
        controller:backToEntry()
    end)

    UI.button(self.root, "hero/btnAtk", function()
        self:onBtnAtk()
    end)

    UI.button(self.root, "npc/btnReward", function()
        local funYes = function()
            message:send("C2S_rewardHeroes", {}, function(msg)
                self:showRewardHeroPage(true, msg)
            end)
        end
        UI.msgBox("是否要犒赏豪杰？", funYes, function()
        end)
    end)

    UI.button(self.root, "npc/btnRecover", function()
        message:send("C2S_showRecover", {}, function(msg)
            self:showRecover(true, msg)
        end)
    end)

    UI.button(self.root, "hero/btnChange", function()
        message:send("C2S_showRecover", {}, function(msg)
            self:showRecover(true, msg)
        end)
    end)
end

function class:onBtnAtk()
    message:send("C2S_fightKeyMan", {}, function(msg)
        self:showAtkCG(msg)
    end)
end

function class:showAtkCG(msg)
    local bossNode = UI.child(self.root, "boss")
    UI.tweenList(bossNode, {
        {
            time = 0.5
        },
        {
            scale = 1.3,
            time = 0.05
        },
        {
            scale = 0.9,
            time = 0.05
        },
        {
            scale = 1.2,
            time = 0.05
        },
        {
            scale = 0.9,
            time = 0.05
        },
    })

    local heroNode = UI.child(self.root, "hero/root")
    heroNode = UI.child(heroNode, 0)
    UI.tweenList(heroNode, {
        {
            scale = 80,
            time = 0.1
        },
        {
            scale = 150,
            time = 0.1
        },
        {
            offset = {
                x = 0,
                y = 1000,
                z = 0,
            },
            scale = 100,
            time = 0.2
        },
        {
            fun = function()
                self:onAtkCGEnd(msg)
            end,
            scale = 30,
            time = 0.2
        },
        {
            type = "delete",
        },
    })
end

-- msg S2C_fightKeyMan
function class:onAtkCGEnd(msg)
    controller:dealWithCode(msg.code)

    if msg.code == "notSearchTime" or
            msg.code == "notCatchTime" then
        return
    end

    if msg.keyManHp == 0 then
        self:showPassLevelReward(msg)
    else
        self:updatePageState(msg.attackHeroId ~= 0,
                msg.attackHeroId, msg.attackHeroAtk, msg.heroCount)
    end
    ComTools.disDamage(self.root, { y = -300 }, msg.dmg, false)
    self:updateKeyManBlood(self.data.levelId, msg.keyManHp)
    UI.text(self.root, "score", msg.totalScore)
end

-- msg S2C_fightKeyMan
function class:showPassLevelReward(msg)

    if msg.itemId ~= 0 then
        self:showUpgrade(true, msg.itemId, msg.itemCount, msg.hasNextLevel)
    else
        self:showPersuade(true, msg.addScore)
    end
end

--msg S2C_rewardHeroes
function class:showRewardHeroPage(show, msg)
    UI.enable(self.root, "reward", show)
    if show then
        local data = msg.info
        local parent = UI.child(self.root, "reward/list/v/c")
        UI.cloneChild(parent, #data)
        local config = config["hero"]
        for i = 1, #data do
            local heroConfig = config[data[i].id]
            local itemData = {
                icon = heroConfig.head,
                name = data[i].id > 1 and heroConfig.name or heroConfig.name .. client.user.name,
                num = "+" .. data[i].exp
            }
            UI.draw(parent:GetChild(i - 1), itemData)
        end
        UI.button(self.root, "reward/btnSure", function()
            self:showRewardHeroPage(false)
            self:show(false)
            controller:backToEntry()
        end)
    end
end

function class:show(show)
    UI.enable(self.root, show)
    if show then
        message:send("C2S_getFightKeyManInfo", {}, function(msg)
            self.data = msg
            self:updateKeyManBlood(msg.levelId, msg.keyManHp)
            UI.text(self.root, "keyManDialog/Text", self:randomDialog(2))
            UI.text(self.root, "score", msg.score)
            self:updatePageState(msg.attackHeroId ~= 0, msg.attackHeroId, msg.heroAtk, msg.heroCount)
        end)
    else
        self.data = nil
    end
end

function class:updatePageState(hasAtkHero, heroId, heroAtk, heroCount)
    UI.enable(self.root, "npc", not hasAtkHero)
    UI.enable(self.root, "hero", hasAtkHero)
    if hasAtkHero then
        self:showFightHero(heroId, heroAtk)
    else
        self:showNpc(heroCount)
    end
end

function class:showFightHero(id, atk)
    local heroConfig = config["hero"][id]
    local name
    if id == 1 then
        name = client.user.name
    else
        name = heroConfig.name
    end
    local data = {
        dialog = self:randomDialog(3),
        name = name,
        atk = goldFormat(atk),
        root = heroConfig.head
    }
    UI.draw(self.root, "hero", data)
end

function class:showNpc(heroCount)
    local data = {
        dialog = "启禀大人，此次探案的" .. heroCount .. "位豪杰均处于休息状态，不知大人有何吩咐？",
        root = 2
    }
    UI.draw(self.root, "npc", data)
end

function class:randomDialog(type)
    local config = config["worldBossDetectTalk"]
    local tab = {}
    local index = 0
    for i, v in ipairs(config) do
        if v.type == type then
            index = index + 1
            tab[index] = v.content
        end
    end

    local random = math.floor(math.random(1, index))
    return tab[random]
end

function class:updateKeyManBlood(levelId, crtBlood)
    local config = config["worldBossDetect"][levelId]
    local Slider = UI.child(self.root, "blood")
                     .gameObject:GetComponent(typeof(CS.UnityEngine.UI.Slider))
    if Slider then
        Slider.value = crtBlood / config.life
    end
    UI.text(self.root, "blood/num", "血量：" .. crtBlood)
end

function class:showPersuade(show, addScore)
    UI.enable(self.root, "persuade", show)
    if show then
        UI.draw(self.root, "persuade", {
            score = "+" .. addScore
        })
        UI.button(self.root, "persuade", function()
            controller:enterGame(function()
                self:showPersuade(false)
                self:show(false)
            end)
        end)
    end
end

function class:showUpgrade(show, id, count, hasNextLevel)
    UI.enable(self.root, "upgrade", show)
    if show then
        local config = config["item"][id]
        local data = {
            item = {
                icon = config.icon,
                count = count
            },
            btnSure = function()
                if hasNextLevel then
                    self:showPersuade(false)
                    message:send("C2S_nextSearch", {}, function(msg)
                        controller:dealWithCode(msg.code)
                        if msg.code == "ok" then
                            controller:openPage(controller.Pages.SearchPage, msg.search)
                            self:show(false)
                        end
                    end)
                else
                    controller:backToEntry()
                end
                UI.enable(self.root, "upgrade", false)
            end
        }

        UI.draw(self.root, "upgrade", data)
        UI.button(self.root, "upgrade/item", function()
            UI.showItemInfo(id)
        end)
    end
end

function class:showRecover(show, msg)
    UI.enable(self.root, "change", show)
    if show then
        UI.button(self.root, "change/btnClose", function()
            self:showRecover(false)
        end)
        local config = config["hero"]
        if msg.info == nil or #msg.info <= 0 then
            return
        end
        local count = #msg.info
        local parent = UI.child(self.root, "change/list/v/c")
        UI.cloneChild(parent, count)
        for i = 1, count do
            local heroInfo = msg.info[i]
            local heroConfig = config[heroInfo.id]
            local heroName
            if heroInfo.id == 1 then
                heroName = client.user.name
            else
                heroName = heroConfig.name
            end
            local data = {
                icon = heroConfig.head,
                name = heroName,
                level = heroInfo.level,
                grow = heroInfo.grow,
                allAtt = heroInfo.allAtt,
                btnFight = function()
                    message:send("C2S_changeFightHero", { id = heroInfo.id }, function(msg)
                        self:changeFightHero(msg)
                    end)
                end,
                btnRecover = function()
                    --msg:S2C_usedItem_ack
                    ItemTools.used(7, 1, function(msg)
                        if msg.succeed then
                            message:send("C2S_recoverHero", { id = heroInfo.id }, function(data)
                                local node = parent:GetChild(i - 1)
                                UI.enable(node, "btnFight", data.state == "canFight")
                                UI.enable(node, "btnRecover", data.state == "inRest")
                                UI.enable(node, "cantFight", data.state == "cantFight")
                            end)
                        end
                    end, 1)
                end
            }
            local node = parent:GetChild(i - 1)
            UI.draw(node, data)
            UI.enable(node, "btnFight", heroInfo.state == "canFight")
            UI.enable(node, "btnRecover", heroInfo.state == "inRest")
            UI.enable(node, "cantFight", heroInfo.state == "cantFight")
        end
    end
end

function class:changeFightHero(msg)
    self:showRecover(false)
    --self:showFightHero(msg.id,msg.atk)
    self:updatePageState(true, msg.id, msg.atk, 0)
end

return class