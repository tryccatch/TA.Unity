---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Admin.
--- DateTime: 2021/8/13 13:30
---

local cls = {
    res = "ui/unity_unityBattle"
}

function cls:close()
    self.controller:close(self.controller.Pages.SecretBattle)
end

-- params.params  S2C_enterSecret
function cls:init(params)
    self.controller = params.controller
    UI.button(self.node, "btnClose", function()
        self:close()
    end)
    UI.button(self.node, "btnAtk", function()
        self:onBtnAtkClick(params.params.level)
    end)
    UI.button(self.node, "hero/btnChange", function()
        self.controller:openPage(self.controller.Pages.ChangeHeroes, params.params.level)
    end)
    UI.button(self.node, "btnFightInfo", function()
        self:onBtnFightInfoClick(params.params.level)
    end)
    self:show(params.params)
end

-- data S2C_enterSecret
function cls:show(data)
    local tempConfig = config["allianceBarrier"][data.level]
    UI.text(self.node, "bossName", tempConfig.name)
    UI.button(self.node, "btnAtk", function()
        self:onBtnAtkClick(data.level)
    end)
    UI.button(self.node, "hero/btnChange", function()
        self.controller:openPage(self.controller.Pages.ChangeHeroes, { lv = data.level, callback = function(heroId, atk, bossHp)
            self:updateFightHero(heroId, atk, bossHp)
        end })
    end)
    UI.button(self.node, "btnFightInfo", function()
        self:onBtnFightInfoClick(data.level)
    end)
    self:updateBlood(data.crtHp, data.level)
    self:updateFightHero(data.heroId, data.heroAtk, data.crtHp)
    self:updateKillInfo(data.killInfo)
end

function cls:onBtnAtkClick(level)
    message:send("C2S_fightSecretBoss", { level = level }, function(msg)
        local exit, close = self:dealWithCode(msg.code)
        if exit or close then
            return
        end
        self:showAttackCG(msg)
    end)
end

function cls:onBtnFightInfoClick(level)
    local fightInfo = UI.child(self.node, "fightInfo")
    local activeSelf = fightInfo.gameObject.activeSelf
    local arrow = UI.child(self.node, "btnFightInfo/arrow")
    local localScale = CS.UnityEngine.Vector3(1, 1, 1)
    UI.enable(fightInfo, not activeSelf)
    if not activeSelf then
        localScale.y = -1
        message:send("C2S_showKillList", { level = level }, function(msg)
            local exit, close = self:dealWithCode(msg.code)
            if exit or close then
                return
            end
            local parent = UI.child(fightInfo, "v/c")
            local count = msg.killList == nil and 0 or #msg.killList
            UI.cloneChild(parent, count)
            if count > 0 then
                for i = 1, count do
                    local item = parent:GetChild(i - 1)
                    UI.text(item, self:getKillTxt(msg.killList[i]))
                end
            end
        end)
    end
    arrow.localScale = localScale
end

function cls:updateBlood(crtHp, lv)
    local p = crtHp / config["allianceBarrier"][lv].life
    UI.text(self.node, "bossNum",
            "血量：" .. math.floor(p * 100) .. "%")
    local slider = UI.component(self.node, "bossBlood",
            typeof(CS.UnityEngine.UI.Slider))
    if slider then
        slider.value = p;
    end
end

function cls:updateFightHero(heroId, atk, bossHp)
    local data
    local noHero = heroId == 0
    UI.enable(self.node, "hero/black", noHero)
    UI.enable(self.node, "hero/icon", not noHero)
    UI.enable(self.node, "btnAtk", not noHero and bossHp > 0)
    if noHero then
        data = {
            atk = "???"
        }
    else
        local tempConfig = config["hero"][heroId]
        data = {
            icon = tempConfig.head,
            atk = goldFormat(atk)
        }
    end
    UI.draw(self.node, "hero", data)
end

function cls:updateKillInfo(killInfo)
    UI.text(self.node, "btnFightInfo/desc", self:getKillTxt(killInfo))
end

function cls:getKillTxt(killInfo)
    local txt = "没有击杀信息"
    if killInfo ~= nil then
        txt = "<color=#01FF00>" .. killInfo.killer .. "</color>于"
                .. self:getTimeStr(killInfo.time) .. "<color=#FF2900>击败</color>"
                .. killInfo.bossLv .. "级刑天;"
    end
    return txt
end

function cls:getTimeStr(utc)
    local result = convertToTime(utc / 1000)
    if result then
        print("时间：", utc, result.year, result.month, result.day)
        return result.year .. "年" .. result.month .. "月" .. result.day .. "号"
    else
        return "神秘时刻"
    end

end

function cls:updateKillList(killList)
    if killList and #killList > 0 then
        local parent = UI.child(self.node, "fightInfo/v/c")
        UI.cloneChild(parent, #killList)
        for i = 1, #killList do
            local node = parent:GetChild(i - 1)
            local str = self:getKillTxt(killList[i])
            UI.text(node, str)
        end
    end
end

function cls:showAttackCG(msg)
    if msg.dmg <= 0 then
        self:attackBossResult(msg)
        return
    end
    local bossNode = UI.child(self.node, "bossIcon")
    UI.tweenList(bossNode, {
        {
            time = 0.5
        },
        {
            scale = 1.3,
            time = 0.05
        },
        {
            scale = 0.9,
            time = 0.05
        },
        {
            scale = 1.2,
            time = 0.05
        },
        {
            scale = 0.9,
            time = 0.05
        },
    })

    CS.Sound.Play("effect/fight")
    local heroNode = UI.child(self.node, "hero/icon")
    heroNode = UI.child(heroNode, 0)
    UI.tweenList(heroNode, {
        {
            scale = 80,
            time = 0.1
        },
        {
            scale = 150,
            time = 0.1
        },
        {
            offset = {
                x = 0,
                y = 1000,
                z = 0,
            },
            scale = 100,
            time = 0.2
        },
        {
            fun = function()
                self:attackBossResult(msg)
            end,
            scale = 30,
            time = 0.2
        },
        {
            type = "delete",
        },
    })
end

function cls:attackBossResult(msg)
    self:showAtkRewardPage(true, msg)
    self:updateBlood(msg.crtHp, msg.level)
    self:updateFightHero(msg.heroId, msg.heroAtk, msg.crtHp)
    ComTools.disDamage(self.node, { x = 100, y = -300 }, msg.dmg, false)
end

function cls:dealWithCode(code, successMsg)
    local tip = successMsg
    local exit = false
    local close = false
    if code == "noUnity" then
        exit = true
        tip = "联盟数据不存在！"
    elseif code == "notMember" then
        exit = true
        tip = "您已不是联盟成员！"
    elseif code == "validSecretId" then
        tip = "无效的秘境ID，请退出重试"
        close = true
    elseif code == "noSecretData" then
        tip = "没有秘境数据，请退出重试"
        close = true
    elseif code == "secretHasClose" then
        tip = "秘境尚未开启"
        close = true
    elseif code == "secretBossDead" then
        tip = "该秘境已被击败"
        close = true
    elseif code == "secretHasUsed" then
        tip = "您已在其他联盟参与过此等级秘境，不可再次参与"
        close = true
    end

    if tip ~= nil then
        UI.showHint(tip)
    end
    if exit then
        self.controller:exit()
    elseif close then
        self:close()
    end

    return exit, close
end

function cls:showAtkRewardPage(show, msg)
    if self.atkRewardPage == nil then
        self.atkRewardPage = UI.showNode(self.node, "ui/unity_unityReward")
    end

    UI.enable(self.atkRewardPage, show)
    if show then
        local tempConfig = config["allianceBarrier"][msg.level].name
        UI.text(self.atkRewardPage, "name", tempConfig)
        UI.text(self.atkRewardPage, "dmg", goldFormat(msg.dmg))
        UI.text(self.atkRewardPage, "num", "+" .. msg.score)
        UI.button(self.atkRewardPage, function()
            self:showAtkRewardPage(false)
            if msg.isKillHit then
                self:showKillSuccessPage(msg)
            end
        end)
    end
end

function cls:showKillSuccessPage(msg)
    local node = UI.showNode(self.node, "ui/unity_killSuccess")
    local bossName = config["allianceBarrier"][msg.level].name
    local data = {
        name = msg.myName,
        boss = bossName
    }
    UI.draw(node, data)
    HeroTools.setHeadTemp(msg.myHead, msg.myLv, msg.myCloth)
    HeroTools.showAnim(node, "heroId", 1)
    HeroTools.clearHeadTemp()
    UI.button(node, function()
        self:close()
    end)

    UI.delay(self.node, 5, function()
        self:close()
    end)
end

function cls:onFront()

end

return cls