---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Admin.
--- DateTime: 2021/6/25 10:45
---
local prisonerIconState = {
    empty = 1,
    notCheck = 2,
    hasCheck = 3,
}

local pageHasClose = false

local Class = {
    res = "UI/dayu",
}

CS.Images.Load("Res/PrisonerName", "PrisonerName")
CS.Images.Load("Res/TreasureIcon", "TreasureIcon")

Class.PropInfo = {
    0, --令牌
    154, --荆棘藤条
    155, --狠辣皮鞭
    156, --滚烫烙铁
    157     --狼牙棒
}
function Class:getPropRealId(index)
    return self.PropInfo[index]
end

function Class:getNode()
    log(self)
    --print("啊哈哈：",self.node.name)
    return self.node
end

---@param id number
function Class:getPropIndex(id)
    for i = 1, #self.PropInfo do
        if id == self.PropInfo[i] then
            return i - 1
        end
    end
end

---@param code number
---@param sucMsg string
---@param failMsg string
function Class:dealWithErrorCode(code, sucMsg, failMsg, offsetY)
    if code == "ok" then
        if sucMsg then
            UI.showHint(sucMsg, offsetY)
        end
    elseif code == "fail" then
        if failMsg then
            UI.showHint(failMsg)
        end
    elseif code == "error_noGold" then
        UI.showHint("元宝不足，可前往充值获取")
    elseif code == "error_noFamous" then
        UI.showHint("名望不足，可战胜关卡获得更多名望")
    elseif code == "error_noExtraAddition" then
        UI.showHint("所有属性已铭刻")
    elseif code == "error_additionNotMatch" then
        UI.showHint("属性ID不匹配，洗练失败")
    elseif code == "error_noTreasureWithId" then
        UI.showHint("找不到要洗练的珍宝，洗练失败")
    elseif code == "error_prisonerComplete" then
        UI.showHint("该犯人已审查完毕！")
    elseif code == "error_noMarkAddition" then
        UI.showHint("该属性未铭刻，不可洗练！")
    end
end

function Class:getResName(resId)
    if resId == 1000 then
        return "银两"
    elseif resId == 2000 then
        return "粮草"
    else
        return "军队"
    end
end

function Class:showHelpPage()
    UI.enable(self.node, "help", true)
    UI.button(self.node, "help/BtnClose", function()
        UI.enable(self.node, "help", false)
    end)
end

local PageData = {
    prisoners = {}, --犯人列表，经过排序：PrisonerInfo
    chosenPrisonerIndex = 0, --选中犯人的index:number
    chosenTreasureId = 0, --选中treasure id：number
    chosenAddition = {}, --选中的珍宝属性 {index:属性index,id：属性id}
    beatPrisoner = {}, --击打一次犯人，返回的数据：S2C_beatPrisoner
    treasures = {}              --全部珍宝信息: { Treasure，Treasure，Treasure  }
}

local MainPage = {}

local BeatHurtPage = {}

local TeachNowPage = {}

local CheckStartPage = {}

local NewTreasurePage = {}

local GetTreasurePage = {}

local TreasureUpdatePage = {}

local PrisonerDetailPage = {}

local PropPage = {}

local TreasurePage = {}

local TreasureDetailPage = {}

local RefineTreasurePage = {}

local TipPage = {}

local CaseTipPage = {}

function MainPage:init(root, Class)
    CS.Sound.PlayMusic("music/prison")
    self.Class = Class
    self.root = root
    UI.button(root, "btnHelp", function()
        Class:showHelpPage()
    end)

    UI.button(root, "btnClose", function()
        local btnProp = UI.child(root, "beatHurt/btnProp");
        RedDot.unregisterBtn(btnProp, RedDot.SystemID.PrisonTreasure)
        self.Class:close()
    end)

    UI.button(root, "btnDetail", function()
        PrisonerDetailPage:show(PageData:getChosenPrisoner().id)
    end)

    UI.button(root, "btnBeat", function()
        UI.enable(root, "btnBeat", false)
        self:beatPrisoner()
    end)

    UI.button(root, "beatHurt/btnProp", function()
        PropPage:show()
    end)

    local btnProp = UI.child(root, "beatHurt/btnProp");

    RedDot.registerBtn(btnProp, RedDot.SystemID.PrisonTreasure, true)

    UI.button(root, "btnTreasure", function()
        self:openTreasurePage()
    end)

    UI.button(Class.node, "fullImg/btn", function()
        self:onFullImgClick()
    end)

    UI.button(Class.node, "fullCgBtn/btn", function()
        self:onFullCgClick()
    end)
end

function MainPage:updatePrisonerName(name, id)
    UI.text(self.root, "prisonerName", name)
    UI.image(self.root, "prisonerArtName/root/prisonerName", "PrisonerName", id)
    self.Class:setImageNativeSize(self.root, "prisonerArtName/root/prisonerName")
end

function MainPage:updateFamous(crtF, maxF, dailyF)
    UI.text(self.root, "famousValue", crtF .. "/" .. maxF)
    UI.text(self.root, "dailyFamous", dailyF .. "名望")
end
--[[
    prisonerInfoList = {
        {
            id = 1,
            state = 0
        }
    }
--]]
function MainPage:updatePrisonerList(prisonerInfoList)
    local root = UI.child(self.root, "headList/v/c")
    local lenPrisonList = #prisonerInfoList
    if lenPrisonList > 5 then
        UI.cloneChild(root, #prisonerInfoList)
    else
        lenPrisonList = 5
    end

    for i = 1, lenPrisonList do
        self:updatePrisonerIcon(
                root:GetChild(i - 1),
                i,
                prisonerInfoList[i].state,
                prisonerInfoList[i].id,
                i == 1
        )
    end
end

function MainPage:updatePrisonerIcon(itemNode, index, iconState, prisonerId, isChosen)
    UI.enable(itemNode, "icon", iconState ~= prisonerIconState.empty)
    UI.enable(itemNode, "cross", iconState == prisonerIconState.hasCheck)
    UI.enable(itemNode, "lightBg", isChosen and (iconState ~= prisonerIconState.empty))
    if iconState ~= prisonerIconState.empty then
        local tempConfig = config["prisoner"][prisonerId]
        UI.image(itemNode, "icon", "BossHead", tempConfig.head)
        print("head icon id:", tempConfig.id, "head:", tempConfig.head, "name:", tempConfig.name)
    end

    UI.button(itemNode, function()
        MainPage:onPrisonIconClick(prisonerId, index)
    end)
end

function MainPage:updatePrisonerIconState(index, hasCheck, hasChosen)
    local content = UI.child(self.root, "headList/v/c")
    local item = content:GetChild(index - 1)
    if item then
        UI.enable(item, "cross", hasCheck)
        UI.enable(item, "lightBg", hasChosen)
    end
end

function MainPage:showBeatEffect(beatPropIndex, resId, resName, resCount, completeCallback)
    local item = Class:getComp(self.root, "punish/tool" .. beatPropIndex, CS.SAnim)
    if item then
        item.gameObject:SetActive(true)
        item:Reset()
        UI.delay(self.root, 0.4, function()
            item.gameObject:SetActive(false)
            UI.enable(self.root, "punish/effect", true)
            UI.delay(self.root, 0.4, function()
                UI.enable(self.root, "punish/effect", false)
            end)
            local hitSound, girlSound = self:getBeatAudios(beatPropIndex)
            CS.Sound.PlayWithBack(hitSound, function()
                CS.Sound.Play(girlSound)
            end)

            if resId ~= nil then
                ItemTools.showItemResult({
                    name = resName,
                    count = resCount,
                    icon = resId
                })
            end

            if completeCallback then
                completeCallback()
            end
            UI.enable(self.root, "btnBeat", true)
        end)
    end
end

--[[
0 - 普通
1 - 4 特殊
--]]
function MainPage:getBeatAudios(beatPropId)
    if beatPropId == 0 then
        return "neweffect/hit", "neweffect/girl3"
    elseif beatPropId == 1 then
        return "neweffect/tengtiao", "neweffect/girl1"
    elseif beatPropId == 2 then
        return "neweffect/bianzi", "neweffect/girl1"
    elseif beatPropId == 3 then
        return "neweffect/liaotie", "neweffect/girl2"
    else
        return "neweffect/liangyabang", "neweffect/girl2"
    end
end

function MainPage:switchPrisoner(prisonerInfo)
    -- 情况1：处于心理击打
    -- 情况2：处于血量击打
    -- 情况3：审查完毕
    print("切换犯人：", prisonerInfo.checkCompleteTime)
    if prisonerInfo.checkCompleteTime == 0 then
        BeatHurtPage:show(prisonerInfo.crtCheckLevel <= 8, prisonerInfo)
        TeachNowPage:show(not (prisonerInfo.crtCheckLevel <= 8), prisonerInfo)
        TipPage:show(false)
    elseif prisonerInfo.checkCompleteTime > 0 then
        BeatHurtPage:show(false)
        TeachNowPage:show(false)
        TipPage:show(true)
    end

    self:showPrisonerCG(prisonerInfo.id, 2)
    local config = config["prisoner"][prisonerInfo.id]
    self:updatePrisonerName(config.name, prisonerInfo.id)
end

function MainPage:showPrisonerCG(prisonerId, level)
    local str
    local cgRoot
    if level == 2 then
        cgRoot = UI.child(self.root, "prisonerRoot")
        str = "prisoner" .. prisonerId

        print("show cg:", prisonerId)
    else
        cgRoot = UI.child(self.Class.node, "fullCg")
        str = "prisonerhcg" .. prisonerId
    end

    if cgRoot.childCount > 0 then
        for i = 0, cgRoot.childCount - 1 do
            local child = cgRoot:GetChild(i)
            CS.UIAPI.Destroy(child)
        end
    end

    UI.enable(cgRoot, true)
    UI.enable(self.Class.node, "fullCgBtn", level == 4)
    local node = UI.showNode(cgRoot, "Anim/" .. str)
    UI.playAnim(node, "idle")
end

function MainPage:onPrisonIconClick(prisonerId, index)
    local info = PageData:getPrisonerInfo(index)
    if info == nil then
        UI.showHint("请选择有效犯人")
        return
    end

    local lastPrisoner = PageData:getChosenPrisoner()
    local hasCheck = false
    if lastPrisoner ~= nil then
        hasCheck = lastPrisoner.checkCompleteTime > 0
    end
    self:updatePrisonerIconState(PageData.chosenPrisonerIndex, hasCheck, false)
    PageData.chosenPrisonerIndex = index
    MainPage:switchPrisoner(PageData:getChosenPrisoner())
    local crtPrisoner = PageData:getChosenPrisoner()
    local crtHasCheck = false
    if crtPrisoner then
        crtHasCheck = crtPrisoner.checkCompleteTime > 0
    end
    self:updatePrisonerIconState(PageData.chosenPrisonerIndex, crtHasCheck, true)
end

function MainPage:beatPrisoner()
    local info = PageData:getChosenPrisoner()
    if info.checkCompleteTime > 0 then
        UI.showHint("该犯人已审查完毕！")
        UI.enable(self.root, "btnBeat", true)
    else
        message:send("C2S_beatPrisoner", { id = info.id }, function(msg)
            if pageHasClose then
                return
            end
            UI.enable(self.root, "btnBeat", true)
            self:onBeatPrisoner(msg)
        end)
    end
end

function MainPage:openTreasurePage()
    message:send("C2S_openTreasure", {}, function(msg)
        if pageHasClose then
            return
        end
        PageData:updateTreasures(msg.treasures)
        TreasurePage:show(msg.treasures)
    end)
end

function MainPage:showFullImg(prisonerId)
    UI.rawImage(self.Class.node, "fullImg", "prisonerhcg/prisonerhcg_" .. prisonerId, false)
    UI.enable(self.Class.node, "fullImg", true)
end

function MainPage:onFullImgClick()
    UI.enable(self.Class.node, "fullImg", false)
    --UI.msgBoxTitle("提示","该犯人仍有潜力，待终审结束，本官再来一探究竟。")
    local chosenPrisoner = PageData:getChosenPrisoner()
    if chosenPrisoner.crtCheckLevel < 9 then
        CaseTipPage:show()
    end
    local rawImage = UI.component(self.Class.node, "fullImg", typeof(CS.UnityEngine.UI.RawImage))
    if rawImage then
        rawImage.texture = nil
    end
end

function MainPage:onFullCgClick()
    UI.enable(self.Class.node, "fullCg", false)
    UI.enable(self.Class.node, "fullCgBtn", false)
    local chosenPrisoner = PageData:getChosenPrisoner()
    if chosenPrisoner.crtCheckLevel < 9 then
        CaseTipPage:show()
    elseif chosenPrisoner.checkCompleteTime > 0 then
        BeatHurtPage:show(false)
        TeachNowPage:show(false)
        TipPage:show(true)
    end
end

--msg:S2C_beatPrisoner
function MainPage:onBeatPrisoner(msg)
    Class:dealWithErrorCode(msg.code)
    if msg.code ~= "ok" then
        return
    end
    local prisonerInfo = msg.info
    PageData:setBeatPrisonerInfo(msg)
    PageData:updatePrisoner(prisonerInfo)

    local propIndex = Class:getPropIndex(msg.propId)
    self:showBeatEffect(propIndex, msg.rewardId, Class:getResName(msg.rewardId), msg.rewardCount, function()
        local famous = msg.famous
        UI.enable(self.root, "eft", false)
        UI.enable(self.root, "eft", true)
        self:updateFamous(famous.crtFamous, famous.famousLimit, famous.freeDailyFamous)

        print("击打犯人,当前击打等级=", prisonerInfo.crtCheckLevel, "是否完成lv:", msg.completeLevel, "完成时间：", msg.checkCompleteTime, "blood:", msg.info.crtBloodDef)
        BeatHurtPage:show(prisonerInfo.crtCheckLevel < 9)
        TeachNowPage:show(prisonerInfo.crtCheckLevel == 9 and prisonerInfo.checkCompleteTime == 0)
        if prisonerInfo.crtCheckLevel <= 9 and msg.info.crtBloodDef >= 100 then
            BeatHurtPage:updateHurDef(prisonerInfo.crtHurtDef)

            if msg.completeLevel or msg.completeCheck then
                BeatHurtPage:updateCheckList(prisonerInfo.crtCheckLevel)
            end

            local crtCheckLevel = prisonerInfo.crtCheckLevel
            local completeLevel = msg.completeLevel
            if crtCheckLevel == 2 and completeLevel then
                self:showFullImg(prisonerInfo.id)
            elseif crtCheckLevel > 2 and msg.completeLevel then
                CheckStartPage:show(true)
            end
        else
            TeachNowPage:updateBloodDef(prisonerInfo.crtBloodDef)
            if msg.completeCheck then
                self:showPrisonerCG(prisonerInfo.id, 4)
                self:updatePrisonerIconState(PageData.chosenPrisonerIndex, true, true)
                TeachNowPage:show(false)
                TipPage:show(true)
            end
            MainPage:showPrisonerCG(PageData:getChosenPrisoner().id, 4);
        end
    end)
end

---------------------------------------------------------BeatHurtPage---------------------------------------------------
function BeatHurtPage:init(root)
    self.root = root
    UI.enable(self.root, false)
end

function BeatHurtPage:show(show, prisonerInfo)
    UI.enable(self.root, show)
    if show and prisonerInfo ~= nil then
        print("当前心理防线血量：", prisonerInfo.crtHurtDef, prisonerInfo.crtBloodDef)
        local treasureId = config["prisoner"][prisonerInfo.id].treasure
        self:updateTreasureDesc(treasureId)
        self:updateCheckList(prisonerInfo.crtCheckLevel)
        self:updateHurDef(prisonerInfo.crtHurtDef)
    end
end

function BeatHurtPage:updateTreasureDesc(treasureId)
    if treasureId < 1 then
        log_call("valid treasure id:" .. treasureId)
        return
    end
    local treasureConfig = table.find(config["treasure"], function(a)
        if a.id == treasureId then
            return a
        end
    end)
    if treasureConfig == nil then
        log_call("cant find config with treasure id:" .. treasureId)
        return
    end
    local heroConfig = config["hero"][treasureConfig.heroID]
    local desc = treasureConfig.name .. "\n使用者：" .. heroConfig.name
    UI.text(self.root, "treasureDesc", desc)
    UI.image(self.root, "treasureIcon", "TreasureIcon", treasureConfig.icon)
end

function BeatHurtPage:updateHurDef(value)
    value = math.ceil(value)
    Class:updateSliderValue(self.root, "hurtDefBar", value / 100)
    UI.text(self.root, "hurtDefValue", "心理防线：" .. value .. "%")
end

function BeatHurtPage:updateDmg(value)
    if value == 0 then
        UI.enable(self.root, "atkAddition", false)
    else
        UI.text(self.root, "atkAddition", "+" .. value .. "%")
        UI.enable(self.root, "atkAddition", true)
    end
end

function BeatHurtPage:updateCheckList(crtCheckIndex)
    local listRoot = UI.child(self.root, "checkList")
    for i = 1, 8 do
        self:updateCheckItem(
                listRoot:GetChild(i - 1),
                i < crtCheckIndex
        )
    end
end

function BeatHurtPage:updateCheckItem(itemNode, hasCheck)
    --UI.enable(itemNode,"light",isChecking)
    UI.enable(itemNode, "checkedMark", hasCheck)
    if hasCheck then
        UI.clearGray(itemNode)
    else
        UI.setGray(itemNode)
    end
end
---------------------------------------------------------TeachNowPage---------------------------------------------------
function TeachNowPage:init(root)
    self.root = root
    UI.button(self.root, "btnTeach", function()
        self:onTeachBtnClick()
    end)
end

function TeachNowPage:show(show, prisonerInfo)
    UI.enable(self.root, show)
    if prisonerInfo then
        self:updateBloodDef(prisonerInfo.crtBloodDef)
    end
end

function TeachNowPage:onTeachBtnClick()
    message:send("C2S_teachNow", { id = PageData:getChosenPrisoner().id }, function(msg)
        if pageHasClose then
            return
        end
        self:onTeachNowMessage(msg)
    end)
end

function TeachNowPage:updateBloodDef(value)
    value = math.ceil(value)
    Class:updateSliderValue(self.root, "hurtDefBar", value / 100)
    UI.text(self.root, "hurtDefValue", value .. "%")
end

---@param msg table[S2C_teachNow]
function TeachNowPage:onTeachNowMessage(msg)
    Class:dealWithErrorCode(msg.code)
    if msg.code == "ok" then
        PageData:updatePrisoner(msg.info)
        MainPage:showPrisonerCG(PageData:getChosenPrisoner().id, 4)
        local resIds = msg.resIds;
        local resCounts = msg.resCounts;
        local timer = 0
        local result = {}

        for i = 1, #resIds do
            if result[resIds[i]] == nil then
                result[resIds[i]] = resCounts[i]
            else
                result[resIds[i]] = result[resIds[i]] + resCounts[i]
            end
        end

        for i, v in pairs(result) do
            local name = Class:getResName(i)
            timer = timer + 0.5
            -- 1000 金币 2000 粮草 3000 部队 4000 政绩 5000 元宝
            print("Class Node is null:", Class:getNode() == nil)
            UI.delay(self.root.parent, timer, function()
                print("show reesult:", i, name, v)
                ItemTools.showItemResult({ icon = i, name = name, count = v })
            end)
        end

        if msg.info.crtBloodDef <= 0 then
            TeachNowPage:show(false)
            TipPage:show(true)
            MainPage:updatePrisonerIconState(PageData.chosenPrisonerIndex, true, true)
        else
            TeachNowPage:updateBloodDef(msg.info.crtBloodDef)
        end
        local famous = msg.famous
        MainPage:updateFamous(famous.crtFamous, famous.famousLimit, famous.freeDailyFamous);
    end
end
---------------------------------------------------------CheckStartPage-------------------------------------------------

function CheckStartPage:init(root)
    self.root = root;
    UI.button(self.root, function()
        UI.enable(self.root, false)
        local prisoner = PageData:getChosenPrisoner();
        local prisonerConfig = config["prisoner"][prisoner.id];
        -- print("显示 开始查案：",prisoner.crtCheckLevel)
        CheckStartPage:show(false, prisonerConfig["story" .. prisoner.crtCheckLevel - 1])
    end)
end

function CheckStartPage:show(show, storyID)
    print("check start page show")
    UI.enable(self.root, show)
    if not show and storyID ~= nil then
        Story.show({
            storyID = storyID,
            endFun = function()
                local data = PageData.beatPrisoner
                if data == nil then
                    log_call("[error] no beatPrisonerInfo after story")
                else
                    local treasureData = data.treasure -- Treasure
                    if treasureData ~= nil then
                        if data.newGetTreasure then
                            NewTreasurePage:show(treasureData.id)
                        else
                            TreasureUpdatePage:show(
                                    treasureData.id,
                                    treasureData.levelId,
                                    treasureData.level,
                                    true,
                                    treasureData.additions)
                        end
                    end
                end
            end })
    end
end

---------------------------------------------------------NewTreasurePage------------------------------------------------
function NewTreasurePage:init(root)
    self.root = root;
    UI.button(self.root, "giveBtn", function()
        UI.enable(self.root, false)
        local data = PageData.beatPrisoner
        if data ~= nil then
            if data.newGetTreasure then
                GetTreasurePage:show(data.treasure.id)
            else
                print("[error] not newTreasure but show newTreasurePage")
            end
        end
    end)
end

function NewTreasurePage:show(treasureId)
    UI.enable(self.root, true)
    local heroName
    local tempConfig = Class:getTreasureConfig(treasureId)
    heroName = config["hero"][tempConfig.heroID].name
    UI.image(self.root, "icon", "TreasureIcon", tempConfig.icon)
    UI.text(self.root, "treasureName", tempConfig.name)
    UI.text(self.root, "heroName", "赐予" .. heroName)
end
---------------------------------------------------------GetTreasurePage----------------------------------------------

function GetTreasurePage:init(root)
    self.root = root
    UI.button(self.root, "btnClose", function()
        UI.enable(self.root, false)
    end)
end

function GetTreasurePage:show(treasureId)
    Class:showTreasureDetail(treasureId, self.root)
end

---------------------------------------------------------treasureUpdatePage----------------------------------------------
function TreasureUpdatePage:init(root)
    self.root = root
    UI.button(self.root, "btnClose", function()
        UI.enable(self.root, false)
        local chosenPrisoner = PageData:getChosenPrisoner()
        BeatHurtPage:show(chosenPrisoner.crtCheckLevel < 9)
        TeachNowPage:show(chosenPrisoner.crtCheckLevel == 9
                and chosenPrisoner.checkCompleteTime == 0)
    end)
end

--[[
additionInfo = {
    {
        id,      //属性id
        hasMark  //该条属性是否已经铭刻
    }
}
--]]
function TreasureUpdatePage:show(treasureId, treasureLevelId, level, updating, additionInfo)
    print("treasure info:", level, #additionInfo)
    local showStartCount
    if updating then
        showStartCount = level - 1
    else
        showStartCount = level
    end

    if showStartCount > 0 then
        for i = 1, showStartCount do
            UI.enable(self.root, "gStar" .. i, true)
            local node = UI.child(self.root, "gStar" .. i)
        end
    end

    if showStartCount < 7 then
        for i = showStartCount + 1, 7 do
            UI.enable(self.root, "gStar" .. i, false)
        end
    end

    if updating then
        self:showStarEffect(level)
    end

    if level > 0 then
        self:showAddition(additionInfo)
    end
    Class:showTreasureDetail(treasureLevelId, self.root)

end

function TreasureUpdatePage:showStarEffect(level)
    UI.enable(self.root, "gStar" .. level, true)
    local node = UI.child(self.root, "gStar" .. level)
    CS.UIAPI.TweenRotation(node, CS.UnityEngine.Vector3(0, 0, 359), 1)
end

function TreasureUpdatePage:showAddition(additionInfo)
    for i, v in ipairs(additionInfo) do
        UI.enable(self.root, "additionList/addition" .. i, true)
        local tempConfig = config["treasurePool"][v.id]
        local text = Class:getComp(self.root, "additionList/addition" .. i, CS.UnityEngine.UI.Text)
        --print("treasure:",v.description,UI.colorstr(tempConfig.description, ColorQua[tempConfig.quality]))
        text.text = UI.colorStr(tempConfig.description, ColorQua[tempConfig.quality])
        UI.enable(self.root, "additionList/addition" .. i .. "/hasGet1", not v.hasMark)
    end

    local len = #additionInfo
    if len < 7 then
        for i = len + 1, 7 do
            UI.enable(self.root, "additionList/addition" .. i, false)
        end
    end
end

---------------------------------------------------------PrisonerDetailPage----------------------------------------------
function PrisonerDetailPage:init(root)
    self.root = root
    UI.enable(self.root, false)
    UI.button(self.root, "btnClose", function()
        UI.enable(self.root, false)
    end)
end

function PrisonerDetailPage:show(prisonerId)
    print("prisoner id=" .. prisonerId)
    local tempConfig = config["prisoner"][prisonerId]
    UI.text(self.root, "name", tempConfig.name)
    UI.text(self.root, "sex", self:getSex(tempConfig.sex))
    UI.text(self.root, "desc", tempConfig.description)
    --UI.rawImage(self.root, "icon", "wife/wife_half_" .. tempConfig.head)
    UI.rawImage(self.root, "icon", "character/storyShowCharacter" .. tempConfig.head)

    local treasureConfig = Class:getTreasureConfig(tempConfig.treasure)
    UI.text(self.root, "treasure", treasureConfig.name)
    local heroName = config["hero"][treasureConfig.heroID].name
    UI.text(self.root, "treasureUser", "(使用者：" .. heroName .. ")")
    UI.enable(self.root, true)
end

function PrisonerDetailPage:getSex(value)
    if value == 1 then
        return "男"
    else
        return "女"
    end
end
---------------------------------------------------------PropPage----------------------------------------------
function PropPage:init(root)
    self.root = root
    UI.enable(self.root, false)
    UI.button(self.root, "btnClose", function()
        UI.enable(self.root, false)
    end)

    for i = 1, 4 do
        UI.toggle(self.root, "item" .. i, function(value)
            self:onPropIconClick(i, value, true)
        end, true)
        UI.enable(self.root, "item" .. i .. "/effect", false)
    end
end

function PropPage:show()
    local tempConfig = config["prisonerConfigure"][1]
    for i = 1, 4 do
        local itemConfig = config["item"][tempConfig["hitItemNum" .. i]]
        UI.text(self.root, "item" .. i .. "/desc",
                itemConfig.name .. "\n" .. itemConfig.description)
        UI.text(self.root, "item" .. i .. "/cost",
                "消耗：" .. itemConfig.costGoldNum .. "元宝/次")
        UI.image(self.root, "item" .. i .. "/icon", "Item", itemConfig.id)
    end
    UI.enable(self.root, true)
    if PageData.propInfo and PageData.propInfo.id > 0 then
        local toggle = UI.component(self.root, "item" .. PageData.propInfo.index,
                typeof(CS.UnityEngine.UI.Toggle))
        toggle.isOn = true
        self:onPropIconClick(PageData.propInfo.index, true, false)
    end
end

function PropPage:onPropIconClick(index, isOn, sendMsg)
    local sendId
    local storeIndex = index
    if not isOn then
        UI.enable(self.root, "item" .. index .. "/effect", false)
        local toggleGroup = self.root.gameObject:GetComponent(typeof(CS.UnityEngine.UI.ToggleGroup))
        if toggleGroup:AnyTogglesOn() then
            return
        else
            sendId = 0
            storeIndex = 0
        end
    else
        local config = config["prisonerConfigure"][1]
        sendId = config["hitItemNum" .. index]
    end

    local show = function(id)
        PageData:updatePropId(id, storeIndex)
        if storeIndex > 0 and storeIndex < 5 then
            UI.enable(self.root, "item" .. storeIndex .. "/effect", true)
        end
        local dmg = 0
        if storeIndex > 0 then
            dmg = config["item"][id].addHitNum * 100
        end
        BeatHurtPage:updateDmg(dmg)
    end

    if sendMsg then
        message:send("C2S_choseProp", { id = sendId }, function(msg)
            if pageHasClose then
                return
            end
            show(msg.id)
        end)
    else
        show(PageData.propInfo.id)
    end

end

---------------------------------------------------------TreasurePage----------------------------------------------
function TreasurePage:init(root)
    self.root = root
    UI.enable(self.root, false)
    UI.button(self.root, "btnClose", function()
        UI.enable(self.root, false)
    end)
end

--[[
treasureInfo = {
    {
        id,    //珍宝ID
        level  //珍宝星级
    }
}
--]]
function TreasurePage:show(treasureInfo)
    local itemParent = UI.child(self.root, "list/v/c")
    local childCount = 0;
    if treasureInfo ~= nil and #treasureInfo > 0 then
        childCount = #treasureInfo;
    end

    UI.cloneChild(itemParent, childCount)
    for i, v in ipairs(treasureInfo) do
        local treasureConfig = Class:getTreasureConfig(v.id)
        local item = itemParent:GetChild(i - 1)
        UI.image(item, "icon", "TreasureIcon", treasureConfig.icon)
        UI.text(item, "name", treasureConfig.name)
        local heroName = config["hero"][treasureConfig.heroID].name
        UI.text(item, "heroName", heroName)
        UI.text(item, "starLevel", "星级+" .. v.level)
        UI.enable(item, "hasHero", not v.hasBindHero)
        UI.button(item, function()
            self:onTreasureItemClick(v.id)
        end)
    end
    UI.enable(self.root, true)
end

function TreasurePage:onTreasureItemClick(id)
    RefineTreasurePage:ResetCheck()

    PageData:updateChosenTreasure(id)
    local treasure = PageData:getTreasureData(id)
    if treasure then
        TreasureDetailPage:show(id, treasure.additions,
                PageData:getAdditionMarkCost(id))
    else
        log_call("cant find treasure by id:" .. PageData.chosenTreasureId)
    end
end

----------------------------------------------------------TreasureDetailPage---------------------------------------------

function TreasureDetailPage:MarkAck()
    message:send("C2S_markTreasure", { id = PageData.chosenTreasureId },
            function(msg)
                if pageHasClose then
                    return
                end
                self:OnMarkMessage(msg)
            end)
end

function TreasureDetailPage:init(root)
    self.root = root
    UI.enable(self.root, false)
    UI.button(self.root, "btnClose", function()
        UI.enable(self.root, false)
        PageData:clearChosenTreasureData()
    end)

    UI.button(self.root, "btnRefine", function()
        if PageData:treasureHasMarkAddition(PageData.chosenTreasureId) then
            local treasureInfo = PageData:getTreasureData(PageData.chosenTreasureId)
            RefineTreasurePage:show(treasureInfo.additions)
        else
            UI.showHint("未铭刻属性，请先铭刻属性")
        end
    end)
end

function TreasureDetailPage:onAdditionSelect(index)
    PageData:setBeatPrisonerInfo()
end

---@param msg table[S2C_markTreasure]
function TreasureDetailPage:OnMarkMessage(msg)
    Class:dealWithErrorCode(msg.code, "铭刻成功", "元宝不足，可前往充值获取")
    if msg.code == "ok" then
        PageData:updateTreasure(msg.treasure)
        self:show(msg.id, msg.treasure.additions,
                PageData:getAdditionMarkCost(PageData.chosenTreasureId))
    end
end

function TreasureDetailPage:updateAdditions()
    local treasureInfo = PageData:getTreasureData(PageData.chosenTreasureId)
    if treasureInfo then
        self:showAddition(treasureInfo.additions)
    end
end

function TreasureDetailPage:show(treasureId, treasureAdditions, cost)
    Class:showTreasureDetail(treasureId, self.root)
    self:showAddition(treasureAdditions)
    log(treasureAdditions)
    local hasMarkAll = PageData:treasureHasMarkAll(treasureAdditions)
    UI.enable(self.root, "cost", (not hasMarkAll) and #treasureAdditions > 0)
    UI.enable(self.root, "btnMark", not hasMarkAll)
    UI.text(self.root, "cost", "消耗" .. cost .. "元宝")
end

function TreasureDetailPage:showAddition(treasureAdditions)
    if treasureAdditions and #treasureAdditions > 0 then
        UI.clearGray(self.root, "btnMark")
        UI.button(self.root, "btnMark", function()
            TreasureDetailPage:MarkAck()
        end)
        for i, v in ipairs(treasureAdditions) do
            local text = Class:getComp(self.root, "addition" .. i, CS.UnityEngine.UI.Text)
            local config = config["treasurePool"][v.id]
            text.text = UI.colorStr(config.description, ColorQua[config.quality])
            UI.enable(self.root, "mark" .. i, not v.hasMark)
            text.gameObject:SetActive(true)
        end
    else
        UI.button(self.root, "btnMark", nil)
        UI.setGray(self.root, "btnMark")
    end

    local len = 0
    if treasureAdditions then
        len = #treasureAdditions
    end

    if len < 7 then
        for i = len + 1, 7 do
            UI.enable(self.root, "mark" .. i, false)
            UI.enable(self.root, "addition" .. i, false)
        end
    end
end
---------------------------------------------------------RefineTreasurePage---------------------------------------------

function RefineTreasurePage:init(root)
    self.root = root
    UI.enable(self.root, false)
    UI.button(self.root, "btnClose", function()
        UI.enable(self.root, false)
        TreasureDetailPage:updateAdditions()
    end)

    UI.button(self.root, "btnRefine", function()
        self:refine()
    end)

    for i = 1, 7 do
        print("path:" .. self.root.name .. "/add" .. i)
        local toggle = Class:getComp(self.root, "add" .. i, CS.UnityEngine.UI.Toggle)
        toggle.isOn = false
        UI.toggle(self.root, "add" .. i, function(value)
            self:OnToggleValueChange(value, i)
        end, true)
    end

    self:showCost()
end

function RefineTreasurePage:ResetCheck()
    for i = 1, 7 do
        local toggle = Class:getComp(self.root, "add" .. i, CS.UnityEngine.UI.Toggle)
        toggle.isOn = false
    end
end

function RefineTreasurePage:OnToggleValueChange(isOn, index)
    if isOn then
        PageData:updateChosenAdditionInfo(index)
    elseif index == PageData.chosenAddition.index then
        PageData:resetChosenAddition()
    end
end

function RefineTreasurePage:showCost()
    local cost = config["treasureConfig"][1].id
    UI.text(self.root, "cost", cost .. " 元宝")
end

---@param treasureAdditionIds table[{{id:珍宝属性ID}}]
function RefineTreasurePage:show(treasureAdditionIds)
    UI.enable(self.root, true)
    for i, v in ipairs(treasureAdditionIds) do
        local tempConfig = config["treasurePool"][v.id]
        UI.enable(self.root, "add" .. i, true)
        local text = Class:getComp(self.root, "add" .. i .. "/Label", CS.UnityEngine.UI.Text)
        text.text = UI.colorStr(tempConfig.description, ColorQua[tempConfig.quality])
    end

    if #treasureAdditionIds < 7 then
        for i = #treasureAdditionIds + 1, 7 do
            UI.enable(self.root, "add" .. i, false)
        end
    end
end

function RefineTreasurePage:refine()
    local data = config["treasurePool"][PageData.chosenAddition.id];
    log(PageData.chosenAddition.id)
    log(data)
    if data and data.quality == 5 then
        UI.msgBoxTitle("提示", "当前属性已是最高品质，是否确认洗练？",
                function()
                    self:sendRefineMsg()
                end, function()
                    return
                end)
    elseif data then
        self:sendRefineMsg()
    else
        UI.showHint("请先选择要洗练的属性！")
    end
end

function RefineTreasurePage:sendRefineMsg()
    message:send("C2S_refine", {
        treasureId = PageData.chosenTreasureId,
        index = PageData.chosenAddition.index,
        attId = PageData.chosenAddition.id;
    }, function(msg)
        if pageHasClose then
            return
        end
        self:onRefineResult(msg)
    end)
end

--msg:S2C_refine
function RefineTreasurePage:onRefineResult(msg)
    Class:dealWithErrorCode(msg.code, "洗练成功", "", 100)
    if msg.code == "ok" then
        PageData:updateTreasureAdd(msg)
        local text = Class:getComp(self.root, "add" .. msg.index .. "/Label", CS.UnityEngine.UI.Text)
        local config = config["treasurePool"][msg.attId]
        text.text = UI.colorStr(config.description, ColorQua[config.quality])
    end
end

---------------------------------------------------------Common---------------------------------------------------------

function Class:showTreasureDetail(treasureId, root)
    local tempConfig = Class:getTreasureConfig(treasureId)
    UI.enable(root, true)
    UI.text(root, "strength", self:getNumStr(tempConfig.strength))
    UI.text(root, "wisdom", self:getNumStr(tempConfig.wisdom))
    UI.text(root, "charm", self:getNumStr(tempConfig.charm))
    UI.text(root, "politics", self:getNumStr(tempConfig.politics))
    UI.image(root, "icon", "TreasureIcon", tempConfig.icon)
    UI.text(root, "name", tempConfig.name)

    local heroConfig = config["hero"][tempConfig.heroID]
    UI.image(root, "heroIcon", "HeroHead", tempConfig.heroID)
    UI.text(root, "heroName", heroConfig.name)
    UI.text(root, "history", tempConfig.description)
end

function Class:getNumStr(value)
    if value < 10000 then
        return value
    else
        return string.format("%.1f", value / 10000) .. "万"
    end
end

function Class:getTreasureConfig(treasureId)
    local allConfig = config["treasure"]
    for i, v in ipairs(allConfig) do
        if v.id == treasureId then
            return v
        end
    end

    log_call("can't find treasure config by id:" .. treasureId)
end

function Class:getComp(node, childPath, compType)
    local child = UI.child(node, childPath)
    if child then
        local comp = child.gameObject:GetComponent(typeof(compType))
        if comp then
            return comp
        else
            log_call("can‘t get component:" .. typeof(compType) .. " on node:" .. child.name)
        end
    else
        log_call("can't get component,no child！node:" .. node.name .. ",childPath:" .. childPath)
    end
end

function Class:setImageNativeSize(node, childPath)
    local img = self:getComp(node, childPath, CS.UnityEngine.UI.Image)
    print("img info:" .. img.name)
    if img then
        img:SetNativeSize()
    end
end

function Class:updateSliderValue(node, childPath, value)
    local slider = self:getComp(node, childPath, CS.UnityEngine.UI.Slider)
    if slider then
        slider.value = value
    end
end
----------------------------------------------TipPage------------------------------------------------------------------
function TipPage:init(root)
    self.root = root
    UI.enable(self.root, false)
    UI.button(self.root, "BtnClose", function()
        UI.enable(self.root, false)
    end)
    UI.button(self.root, "BtnFirst", function()
        self:watchEvent(1)
    end)

    UI.button(self.root, "BtnLast", function()
        self:watchEvent(2)
    end)
end

function TipPage:show(show)
    UI.enable(self.root, show)
end

function TipPage:watchEvent(id)
    message:send("C2S_eventBack", { id = id }, function(msg)
        if pageHasClose then
            return
        end
        Class:dealWithErrorCode(msg.code)
        if msg.code == "ok" then
            local id = PageData:getChosenPrisoner().id
            if msg.id == 1 then
                MainPage:showFullImg(id)
            elseif msg.id == 2 then
                MainPage:showPrisonerCG(id, 4)
            end
        end
    end)
end

----------------------------------------------CaseTipPage---------------------------------------------------------------
function CaseTipPage:init(root)
    self.root = root
    UI.enable(self.root, false)
    UI.button(self.root, "BtnClose", function()
        self:onClose()
    end)
    UI.button(self.root, function()
        self:onClose()
    end)
end

function CaseTipPage:onClose()
    UI.enable(self.root, false)
    CheckStartPage:show(true)
end

function CaseTipPage:show()
    UI.enable(self.root, true)
end

----------------------------------------------PageData------------------------------------------------------------------

function PageData:init()

end

function PageData:updatePrisonerList(sortedList)
    self.prisoners = sortedList
end

function PageData:setChosenPrisoner(index)
    self.chosenPrisonerIndex = index
end

function PageData:getPrisonerInfo(index)
    return self.prisoners[index]
end

function PageData:getChosenPrisoner()
    if self.chosenPrisonerIndex > 0 and self.prisoners ~= nil then
        return self.prisoners[self.chosenPrisonerIndex]
    else
        print("can't get chosen prisoner because no one is chosen")
    end
end

function PageData:updatePrisoner(prisonerInfo)
    if self.chosenPrisonerIndex == nil or self.chosenPrisonerIndex < 1 then
        print("cant update prisoner info  cause no data at all")
        return
    end
    for i, v in ipairs(self.prisoners) do
        if v.id == prisonerInfo.id then
            self.prisoners[i] = prisonerInfo
        end
    end
end

function PageData:updateChosenTreasure(treasureId)
    self.chosenTreasureId = treasureId
end

function PageData:updateChosenAdditionInfo(index)
    self.chosenAddition.index = index
    local treasure = self:getTreasureData(self.chosenTreasureId)
    if treasure.additions and #treasure.additions >= index then
        self.chosenAddition.id = treasure.additions[index].id
    else
        log_call("chosen treasure addition error! treasure id:" .. self.chosenTreasureId
                .. ",treasure additionCount:" .. #treasure.additions .. ",chosen index=" .. index)
    end
end

function PageData:updateTreasures(treasures)
    self.treasures = treasures
    --for i = 1, #treasures do
    --    if treasures[i].additions ~= nil then
    --        local temp = treasures[i].additions
    --        if temp ~=nil then
    --            for k, v in ipairs(temp) do
    --                print("additions:",k,v.id,v.hasMark)
    --            end
    --        end
    --    end
    --end
end

function PageData:getChosenAdditions()
    local treasures = self.treasures
    if treasures and #treasures > 0 then
        for _, v in ipairs(treasures) do
            if v.id == self.chosenTreasureId then
                self.chosenAddition.id = v.additions[self.chosenAddition.index]
                return self.chosenAddition
            end
        end
    end
    print("get treasure addition id error! treasure id:" .. self.chosenTreasureId
            .. ",additionIndex:" .. self.chosenAddition.index)
    return null
end

function PageData:resetChosenAddition()
    PageData.chosenAddition.index = 0
    PageData.chosenAddition.id = 0
end

function PageData:clearChosenTreasureData()
    PageData.chosenAddition = {}
    PageData.chosenTreasureId = 0
end

--info :S2C_beatPrisoner
function PageData:setBeatPrisonerInfo(info)
    self.beatPrisoner = info
end

---@param msg table[S2C_refine]
function PageData:updateTreasureAdd(msg)
    local treasureData = self.treasures
    if treasureData and #treasureData > 0 then
        for _, v in ipairs(treasureData) do
            if v.id == msg.treasureId then
                v.additions[msg.index].id = msg.attId
            end
        end
    end

    self.chosenAddition.id = msg.attId
end

function PageData:getTreasureData(id)
    local treasureData = self.treasures
    if treasureData and #treasureData > 0 then
        for _, v in ipairs(treasureData) do
            if v.id == id then
                return v
            end
        end
    end
end

function PageData:getAdditionMarkCost(treasureId)
    local treasureData = self:getTreasureData(treasureId)
    if treasureData then
        local treasureAdd = treasureData.additions
        local hasMarkNum = 0;
        if treasureAdd and #treasureAdd > 0 then
            for i = 1, #treasureAdd do
                if treasureAdd[i].hasMark then
                    hasMarkNum = i
                else
                    break
                end
            end
        end
        if hasMarkNum + 1 <= #config["treasureActive"] then
            local cost = config["treasureActive"][hasMarkNum + 1].cost
            return cost
        else
            return -1;
        end
    end
    return -1;
end

function PageData:treasureHasMarkAddition(treasureId)
    local treasureData = self:getTreasureData(treasureId)
    if treasureData then
        local treasureAdd = treasureData.additions
        if treasureAdd and #treasureAdd > 0 then
            for i, v in ipairs(treasureAdd) do
                if v.hasMark then
                    return true
                end
            end
        end
    end
    return false
end

function PageData:updateTreasure(treasure)
    local allData = self.treasures
    for i = 1, #allData do
        if allData[i].id == treasure.id then
            allData[i] = treasure
            break
        end
    end
end

function PageData:updatePropId(id, index)
    if self.propInfo == nil then
        self.propInfo = {}
    end
    self.propInfo.id = id
    self.propInfo.index = index
end

function PageData:treasureHasMarkAll(additions)
    if additions and #additions == 7 then
        for i, v in ipairs(additions) do
            if not v.hasMark then
                return false
            end
        end
        return true
    end
    return false
end

function PageData:clear()
    self.prisoners = {} --犯人列表，经过排序：PrisonerInfo
    self.chosenPrisonerIndex = 0--选中犯人的index:number
    self.chosenTreasureId = 0--选中treasure id：number
    self.chosenAddition = {}--选中的珍宝属性 {index:属性index,id：属性id}
    self.beatPrisoner = {}--击打一次犯人，返回的数据：S2C_beatPrisoner
    self.treasures = {}              --全部珍宝信息: { Treasure，Treasure，Treasure  }
    self.propInfo = nil
end

----------------------------------------------Class(Controller)---------------------------------------------------------
function Class:init()
    UI.enable(self.node, false)
    pageHasClose = false
    message:send("C2S_getPrisonerList", {}, function(msg)
        if self.hasClose then
            return
        end
        local list = msg.prisoners
        if list == nil or #list < 1 then
            UI.showHint("您还未获得犯人~")
            pageHasClose = true
            UI.close(self)
            return
        end
        UI.enable(self.node, true)
        MainPage:init(UI.child(self.node, "main"), self)
        BeatHurtPage:init(UI.child(self.node, "main/beatHurt"), self)
        TeachNowPage:init(UI.child(self.node, "main/teachNow"), self)
        CheckStartPage:init(UI.child(self.node, "checkStart"), self)
        NewTreasurePage:init(UI.child(self.node, "newTreasure"), self)
        GetTreasurePage:init(UI.child(self.node, "getTreasure"), self)
        TreasureUpdatePage:init(UI.child(self.node, "updateTreasure"), self)
        PrisonerDetailPage:init(UI.child(self.node, "prisonerDetail"), self)
        PropPage:init(UI.child(self.node, "prop"), self)
        TreasurePage:init(UI.child(self.node, "treasure"), self)
        TreasureDetailPage:init(UI.child(self.node, "treasureDetail"), self)
        RefineTreasurePage:init(UI.child(self.node, "refine"), self)
        TipPage:init(UI.child(self.node, "tips"), self)
        CaseTipPage:init(UI.child(self.node, "tip2"), self)
        self:OnGetPrisonerListMsg(msg)
    end)

end


--msg:S2C_getPrisonerList
function Class:OnGetPrisonerListMsg(msg)
    --排序
    --1 先 可审查 后不可审查
    --2 可审查：按照获得先后顺序显示
    --3 已审查：按照审查完成先后顺序显示

    local list = msg.prisoners
    table.sort(list, function(a, b)
        if a.checkCompleteTime ~= b.checkCompleteTime then
            return a.checkCompleteTime < b.checkCompleteTime
        else
            return a.getTime < b.getTime
        end
    end)

    PageData:setChosenPrisoner(1)
    PageData:updatePrisonerList(list)

    local index = self:getPropIndex(msg.propId)
    PageData:updatePropId(msg.propId, index)

    local infoList = {}
    for i, v in ipairs(list) do
        local state
        if v.checkCompleteTime > 0 then
            state = prisonerIconState.hasCheck
        else
            state = prisonerIconState.notCheck
        end
        infoList[i] = {
            id = v.id,
            state = state
        }
    end

    if #infoList < 5 then
        for i = #infoList + 1, 5 do
            infoList[i] = {
                id = -1,
                state = prisonerIconState.empty
            }
        end
    end
    MainPage:updatePrisonerList(infoList)
    MainPage:switchPrisoner(list[1])
    local famousInfo = msg.famousInfo
    MainPage:updateFamous(famousInfo.crtFamous,
            famousInfo.famousLimit,
            famousInfo.freeDailyFamous)
    if PageData.propInfo.id > 0 then
        local dmg = 0
        dmg = config["item"][PageData.propInfo.id].addHitNum * 100
        BeatHurtPage:updateDmg(dmg)
    end

end

function Class:close()
    PageData:clear()
    pageHasClose = true
    UI.close(self)
end

return Class