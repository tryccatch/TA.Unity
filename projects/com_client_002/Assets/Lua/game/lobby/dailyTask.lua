---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Admin.
--- DateTime: 2021/7/12 14:38
---
local cls = {
    res = "ui/dailyTask"
}

local TaskState = {
    Doing = "Doing",
    Complete = "Complete",
    Got = "Got"
}

CS.Images.Load("Res/DailyTask","DailyTask")

function cls:init()
    self.hasClose = false
    UI.button(self.node,"btnClose",function()
        self.hasClose = true
        UI.close(self)
    end)
    self:showRewardPage(false)
    self:show(true)
end

function cls:onFront()
    self:show(true)
end

function cls:show(show)
    UI.enable(self.node,show)
    if show then
        message:send("C2S_openDailyTask",{},function(msg)
            if self.hasClose then
                return
            end
            UI.text(self.node,"score",msg.score)
            self:updateActiveProgress(msg.score)
            self:updateList(msg)
            self:updateTreasureBox(msg.boxes)
            self:updatePoint(msg.score)
        end)
    end
end

function cls:updatePoint(score)
    local start = 100
    for i = 1, 4 do
        local path = "pointText"..i
        local tempScore = start + (i-1)*300
        UI.enable(self.node,path.."/point",tempScore <=score)
        UI.enable(self.node,path.."/Image",tempScore >score)
    end
end

--msg S2C_openDailyTask
function cls:updateActiveProgress(score)
    local config = config["dailyTaskReward"]
    local maxValue = config[#config].activePoint
    local slider = UI.child(self.node,"slider")
            .gameObject:GetComponent(typeof(CS.UnityEngine.UI.Slider))
    slider.value = score/maxValue
end

-- msg S2C_openDailyTask
function cls:updateList(msg)
    local data = msg.list
    self.taskData = data
    self:sortList(data)
end

function cls:sortList(data)
    local temp = function(state)
        if state == "Complete" then
            return 0
        elseif state == "Doing"  then
            return 1
        else
            return 2
        end
    end

    table.sort(data,function(a,b)
        local va = temp(a.state)
        local vb = temp(b.state)
        if va ~= vb then
            return va < vb
        else
            return a.id < b.id
        end
    end)
    local parent = UI.child(self.node,"list/v/c")
    UI.cloneChild(parent,#data)
    for i = 1, #data do
        local node = parent:GetChild(i-1)
        self:updateSingleTask(node,data[i])
    end
end

function cls:updateTaskData(taskData)
    if self.taskData ~= nil and #self.taskData >0 then
        for i = 1, #self.taskData do
            if self.taskData[i].id == taskData.id then
                self.taskData[i] = taskData
                return
            end
        end
    end
end

function cls:updateSingleTask(node, taskData)
    local config = config["dailyTask"][taskData.id]
    --print("task info id="..taskData.id..",name="..config.name)
    local info = {
        title = config.name,
        politicsNum = config.score,
        activeNum = config.activePoint,
        targetNum = taskData.crtValue.."/"..config.num,
        btnGet = function()
            self:tryGetTaskReward(taskData.id,node)
        end,
        btnGo = function()
            self:goToPage(taskData.id)
        end
    }
    UI.draw(node,info)
    UI.enable(node,"btnGet", taskData.state == TaskState.Complete)
    UI.enable(node,"btnGo", taskData.state == TaskState.Doing)
    UI.enable(node,"complete", taskData.state == TaskState.Got)
end

function cls:goToPage(id)
    local pageId = config["dailyTask"][id].page
    local pageName = config["gamePage"][pageId].name
    UI.openPage(UIPageName[pageName])
end

--msg S2C_tryGetTaskReward
function cls:tryGetTaskReward(id,node)
    message:send("C2S_tryGetTaskReward",{id = id},function(msg)
        if self.hasClose then
            return
        end
        if msg.id == -1 then
            UI.showHint("任务Id错误,请刷新日常任务页面")
            return
        end

        local delay = 0;
        if msg.politicsCount >0 then
            ItemTools.showItemResultByResName({
                name = "政绩",
                icon = 1,
                count = msg.politicsCount
            },"DailyTask")
            delay = delay+0.5;
        end
        if msg.activityCount >0 then
            UI.delay(self.node,delay,function()
                ItemTools.showItemResultByResName({
                    name = "活跃",
                    icon = 2,
                    count = msg.activityCount
                },"DailyTask")
            end)
        end
        self:updateTaskData(msg.task)
        self:sortList(self.taskData)
        UI.text(self.node,"score",msg.score)
        self:updateActiveProgress(msg.score)
        if msg.boxes ~= nil and #msg.boxes >0 then
            self:updateTreasureBox(msg.boxes)
        end
        self:updatePoint(msg.score)
    end)
end

-- msg S2C_openDailyTask
function cls:updateTreasureBox(data)
    for i = 1, #data do
        self:updateSingleTreasureBox(data[i],i)
    end
end

function cls:updateSingleTreasureBox(state, index)
    print("state :",state,index)
    local path = "box"..index
    UI.enable(self.node,path.."/used", state ==TaskState.Got)
    UI.enable(self.node,path.."/close", state == TaskState.Doing)
    UI.enable(self.node,path.."/open", state == TaskState.Complete)
    UI.button(self.node,path,function()
        self:onTreasureBoxClick(index)
    end)
end

function cls:onTreasureBoxClick(i)
    message:send("C2S_treasureBoxClick",{id =i},function(msg)
        if self.hasClose then
            return
        end
        if msg.state == TaskState.Doing or
                msg.state == TaskState.Got then
            self:showRewardPage(true,i)
        else
            local delay = 0
            for i = 1, #msg.rewards do
                local data = msg.rewards[i]
                local config  = table.find(config["item"],function(a)
                    if a.id ==data.id  then
                        return a
                    end
                end)

                UI.delay(self.node,delay,function()
                    ItemTools.showItemResult({
                        name = config.name,
                        count = data.count,
                        icon = config.icon
                    })
                end)
                delay = delay + 0.5
            end
            self:updateSingleTreasureBox(TaskState.Got,i)
        end
    end)
end



function cls:showRewardPage(show,index)
    UI.enable(self.node,"reward",show)
    if show then
        UI.button(self.node,"reward/BtnClose",function()
            self:showRewardPage(false)
        end)
        local tempConfig = config["dailyTaskReward"][index]

        print("config rsult:"..index)
        local usedCount = 0
        local data = {}
        if tempConfig.moneyMax > 0 then
            usedCount = usedCount + 1
            data["icon"..usedCount] = 1000
        end

        if tempConfig.foodMax > 0 then
            usedCount = usedCount+1
            data["icon"..usedCount] = 2000
        end

        if tempConfig.soldierMax >0 then
            usedCount = usedCount+1
            data["icon"..usedCount] = 3000
        end

        if tempConfig.goldMax >0 then
            usedCount = usedCount+1
            data["icon"..usedCount] = 5000
        end

        if usedCount >=4 then
            return
        end

        local tempData = tempConfig.item
        local realIdData = {}
        for i = 1, #tempData,3 do
            usedCount = usedCount+1
            local itemConfig = config["item"][tempData[i]]
            data["icon"..usedCount] = itemConfig.icon
            realIdData[itemConfig.icon] = tempData[i]
            if usedCount >=4 then
                break
            end
        end

        for i = 1, 4 do
            UI.enable(self.node,"reward/icon"..i,i<=usedCount)
            UI.button(self.node,"reward/icon"..i,function()
                local id  = data["icon"..i]
                if id >=1000 then
                    UI.showItemInfo(id)
                else
                    id = realIdData[id]
                    UI.showItemInfo(id)
                end
            end)
        end

        UI.draw(self.node,"reward",data)

        UI.text(self.node,"reward/activeNum", tempConfig.activePoint)
    end
end


return cls