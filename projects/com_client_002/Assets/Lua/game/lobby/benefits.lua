---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by DH.
--- DateTime: 2021/11/5 10:49
---
local Class = {
    res = "ui/benefits"
}

function Class:init(index)

    if not index then
        index = 1
    end

    local channel = Tools.getChannelMap()
    self.rate = channel.getGold

    UI.enableAll(self.node, "Page", false)

    self:showBtn()
    self:showAnim()
    self:showRedDot()
    self:showPage(index)
end

function Class:showBtn()
    UI.button(self.node, "BtnClose", function()
        UI.close(self)
    end)

    local btnNode = UI.child(self.node, "Bottom/Btn")
    UI.button(btnNode, "btnSignIn", function()
        self:showPage(1)
    end)
    UI.button(btnNode, "btnMonth", function()
        self:showPage(2)
    end)
    UI.button(btnNode, "btnYear", function()
        self:showPage(3)
    end)
    UI.button(btnNode, "btnDouble", function()
        self:showPage(4)
    end)
    UI.button(btnNode, "btnFirstCharge", function()
        self:showPage(5)
    end)
    UI.button(btnNode, "btnContact", function()
        self:showPage(6)
    end)
end

function Class:showAnim()
    local monthAnim = UI.showNode(self.node, "Page/cardMonth/Anim", "Anim/wife6")
    UI.playAnim(monthAnim, "idle")

    local yearAnim = UI.showNode(self.node, "Page/cardYear/Anim", "Anim/wife10")
    UI.playAnim(yearAnim, "idle")

    local firstChargeAnim = UI.showNode(self.node, "Page/cardFirstCharge/Anim", "Anim/hero27")
    UI.playAnim(firstChargeAnim, "idle")

    local contactAnim = UI.showNode(self.node, "Page/cardContact/Anim", "Anim/wife1")
    UI.playAnim(contactAnim, "idle")
end

function Class:countDown()
    message:send("C2S_ReqCountDown", {}, function(ret)
        --log(ret)
        self.value = ret.countDown
        if UI.check(self.node) then
            UI.CountDown(self.node, "countDown", ret.countDown / 1000, function()
                local index = self.index
                self.index = 0
                self.value = nil
                self.signInInfo = nil
                self.monthInfo = nil
                self.yearInfo = nil
                self:showRedDot()
                self:showPage(index)
            end, 3, false)
        end
    end, true)
end

function Class:setVisual(bool)
    local text = UI.child(self.node, "countDown").gameObject:GetComponent(typeof(CS.UnityEngine.UI.Text))
    if text then
        text.enabled = bool
        UI.enable(self.node, "countDown/Text", bool)
    end
end

function Class:showRedDot()
    local btnNode = UI.child(self.node, "Bottom/Btn")
    local show = function()
        --log(self.redDot)
        for i, v in ipairs(self.redDot) do
            local child = UI.child(btnNode, i - 1)
            UI.enable(child, "redDot", v)
        end
    end
    --if self.redDot then
    --    show()
    --end
    message:send("C2S_ReqRedDot", {}, function(ret)
        self.redDot = ret.redDot
        show()
    end)
end

function Class:showPage(index)
    local pageNode = UI.child(self.node, "Page")
    if not UI.child(pageNode, index - 1).gameObject.activeSelf then
        UI.enableOne(self.node, "Page", index - 1)
        UI.enableOne(self.node, "Top/Title", index - 1)
    end

    if self.index and index == self.index then
        return
    end

    self:setVisual(false)

    if index <= 3 and not self.value then
        self:countDown()
    end

    if index == 1 then
        self:showSignIn()
    elseif index == 2 then
        self:showMonth()
    elseif index == 3 then
        self:showYear()
    elseif index == 4 then
        if self.vipLevel and self.vipLevel ~= client.user.vip then
            self.doubleInfo = nil
        end
        self:showDouble()
    elseif index == 5 then
        self:showFirstCharge()
    elseif index == 6 then
        self:showContact()
    end
    self.index = index
end

function Class:showEffect(node, value)
    if UI.check(node) then
        local effect = node:Find("effect")
        if value then
            if not effect then
                UI.showNode(node, "Effect/itemEffect").name = "effect"
            else
                UI.enable(effect, true)
            end
        else
            if effect then
                UI.enable(effect, false)
            end
        end
    end
end

function Class:showSignIn()
    local node = UI.child(self.node, "Page/cardSignIn")
    local toDayNode = UI.child(node, "ToDay")

    local btnAck = function()
        message:send("C2S_ReqSignInToDay", {}, function(ret)
            if ret.code == "ok" then
                self.signInInfo.state = 1
                for i, v in ipairs(self.signInInfo.ToDay) do
                    self.signInInfo.ToDay[i].gotten = true
                    UI.showItemEffect(UI.child(toDayNode, i - 1), not v.gotten)
                end
                UI.draw(node, self.signInInfo)
                UI.enableOne(node, "Btn", self.signInInfo.state)
                ItemTools.showItemsResult(self.signInInfo.ToDay)
            else
                self.signInInfo = nil
                self:showSignIn()
            end
            if self.redDot[1] then
                self:showRedDot()
            end
        end)
    end

    local deal = function()
        local nextDayNode = UI.child(node, "NextDay")
        for i, v in ipairs(self.signInInfo.ToDay) do
            self.signInInfo.ToDay[i].icon = config.itemMap[v.id].icon
            self.signInInfo.ToDay[i].fun = function()
                UI.showItemInfo(v.id)
            end
            self:showEffect(UI.child(toDayNode, i - 1), not v.gotten)
        end
        for i, v in ipairs(self.signInInfo.NextDay) do
            self.signInInfo.NextDay[i].icon = config.itemMap[v.id].icon
            self.signInInfo.NextDay[i].fun = function()
                UI.showItemInfo(v.id)
            end
            self:showEffect(UI.child(nextDayNode, i - 1), not v.gotten)
        end

        if self.signInInfo.state == 0 then
            UI.button(node, "Btn/Ack", function()
                btnAck()
            end)
        end
    end

    local show = function()
        --log(self.signInInfo)
        UI.draw(node, self.signInInfo)
        UI.enableOne(node, "Btn", self.signInInfo.state)
    end

    if self.signInInfo then
        show()
    else
        message:send("C2S_ReqSignInInfo", {}, function(ret)
            self.signInInfo = ret
            deal()
            show()
        end)
    end
end

function Class:showMonth()
    local node = UI.child(self.node, "Page/cardMonth")
    local itemsNode = UI.child(node, "Reward/items")
    local btnNode = UI.child(node, "Btn")
    local cfg = config.cardMonthMap[1]

    local rep = { getGold = cfg.get,
                  dayGold = cfg.getEveryday[2],
                  money = Tools.showChannelValue(cfg.RMB),
                  Color = "01FF00" }
    UI.text(node, "Bottom/Text", UI.gsub(cfg.description, rep, 3))

    local btnAck = function()
        message:send("C2S_ReqGetMonthItem", {}, function(ret)
            if ret.code == "ok" then
                if self.monthInfo.weekDay == 7 then
                    ItemTools.showItemsResult(self.monthInfo.items)
                else
                    ItemTools.showItemsResult(self.monthInfo.items[1])
                end
            end
            self.monthInfo = nil
            self:showMonth()
            if self.redDot[2] then
                self:showRedDot()
            end
        end)
    end

    local show = function(data)
        UI.enableOne(btnNode, data.state > 0 and 1 or 0)
        UI.enable(btnNode, "Ack/redDot", data.state == 0)
        UI.enable(node, "Reward/weekInfo", data.state >= 0)
        if data.state == -1 then
            UI.text(btnNode, "Ack/Text", Tools.showChannelValue(cfg.RMB))
            UI.button(btnNode, "Ack", function()
                ComTools.charge(config.cardMonthMap[1], "monthCard", math.floor(cfg.RMB / self.rate), function()
                    self.monthInfo = nil
                    self:showMonth()
                    self:showRedDot()
                end)
            end)
        elseif data.state == 0 then
            UI.text(btnNode, "Ack/Text", "领 取")
            if data.weekDay == 7 then
                UI.text(node, "Reward/weekInfo", ":可领取")
            else
                UI.text(node, "Reward/weekInfo", ":还需要<color=#01FF00> " .. data.weekDay .. " </color>天")
            end
            UI.button(btnNode, "Ack", function()
                btnAck()
            end)
        else
            UI.text(node, "Reward/weekInfo", ":还需要<color=#01FF00> " .. data.weekDay .. " </color>天")
        end

        UI.enable(node, "day", data.state >= 0 and data.day > 1)
        if data.day > 1 then
            UI.text(node, "day", data.day)
            --log(data.day)
        else
            if data.state >= 0 then
                self:setVisual(true)
            end
        end
        --log(data)
        UI.draw(node, "Reward", data)
    end

    local deal = function()
        for i, v in ipairs(self.monthInfo.items) do
            self.monthInfo.items[i].icon = config.itemMap[v.id].icon
            self.monthInfo.items[i].fun = function()
                UI.showItemInfo(v.id)
            end
            self:showEffect(UI.child(itemsNode, i - 1), not v.gotten)
        end
    end

    if self.monthInfo then
        show(self.monthInfo)
    else
        message:send("C2S_ReqMonthInfo", {}, function(ret)
            self.monthInfo = ret
            deal()
            show(self.monthInfo)
        end)
    end
end

function Class:showYear()
    local node = UI.child(self.node, "Page/cardYear")
    local itemsNode = UI.child(node, "Reward/items")
    local btnNode = UI.child(node, "Btn")
    local cfg = config.cardYearMap[1]

    local rep = { getGold = cfg.get,
                  dayGold = cfg.getEveryday[2],
                  money = Tools.showChannelValue(cfg.RMB),
                  vipLevel = "VIP" .. cfg.getVIP,
                  name = config.wifeMap[cfg.wife].name,
                  Color = "01FF00" }
    UI.text(node, "Bottom/Text", UI.gsub(cfg.description, rep, 5))

    local btnAck = function()
        message:send("C2S_ReqGetYearItem", {}, function(ret)
            if ret.code == "ok" then
                if self.yearInfo.weekDay == 7 then
                    ItemTools.showItemsResult(self.yearInfo.items)
                else
                    ItemTools.showItemsResult(self.yearInfo.items[1])
                end
            end
            self.yearInfo = nil
            self:showYear()
            if self.redDot[3] then
                self:showRedDot()
            end
        end)
    end

    local show = function(data)
        UI.enableOne(btnNode, data.state > 0 and 1 or 0)
        UI.enable(btnNode, "Ack/redDot", data.state == 0)
        UI.enable(node, "Reward/weekInfo", data.state >= 0)
        if data.state == -1 then
            UI.text(btnNode, "Ack/Text", Tools.showChannelValue(cfg.RMB))
            UI.button(btnNode, "Ack", function()
                ComTools.charge(config.cardYearMap[1], "yearCard", math.floor(cfg.RMB / self.rate), function()
                    self.yearInfo = nil
                    self:showYear()
                    self:showRedDot()
                end)
            end)
        elseif data.state == 0 then
            UI.text(btnNode, "Ack/Text", "领 取")
            if data.weekDay == 7 then
                UI.text(node, "Reward/weekInfo", ":可领取")
            else
                UI.text(node, "Reward/weekInfo", ":还需要<color=#01FF00> " .. data.weekDay .. " </color>天")
            end
            UI.button(btnNode, "Ack", function()
                btnAck()
            end)
        else
            UI.text(node, "Reward/weekInfo", ":还需要<color=#01FF00> " .. data.weekDay .. " </color>天")
        end

        UI.enable(node, "day", data.state >= 0 and data.day > 1)
        if data.day > 1 then
            UI.text(node, "day", data.day)
            --log(data.day)
        else
            if data.state >= 0 then
                self:setVisual(true)
            end
        end
        --log(data)
        UI.draw(node, "Reward", data)
    end

    local deal = function()
        for i, v in ipairs(self.yearInfo.items) do
            self.yearInfo.items[i].icon = config.itemMap[v.id].icon
            self.yearInfo.items[i].fun = function()
                UI.showItemInfo(v.id)
            end
            self:showEffect(UI.child(itemsNode, i - 1), not v.gotten)
        end
    end

    if self.yearInfo then
        show(self.yearInfo)
    else
        message:send("C2S_ReqYearInfo", {}, function(ret)
            self.yearInfo = ret
            deal()
            show(self.yearInfo)
        end)
    end
end

function Class:showDouble()
    local node = UI.child(self.node, "Page/cardDouble")

    local show = function()
        for i, v in ipairs(self.doubleInfo.type) do
            self.doubleInfo.type[i].miricle = v.count .. "/" .. v.maxCount
        end
        UI.draw(node, "Type", self.doubleInfo.type)
        if self.redDot[4] then
            self:showRedDot()
        end
    end

    if self.doubleInfo then
        show()
    else
        message:send("C2S_ReqDoubleInfo", {}, function(ret)
            self.doubleInfo = ret
            self.vipLevel = client.user.vip
            show()
        end)
    end
end

function Class:getFirstChargeConfig(index)
    local data = {}
    local count = 1;
    for i = 1, #config["pay"] do
        if config["pay"][i].firstCharge == 1 then
            data[count] = config["pay"][i]
            count = count + 1
            if count == 8 then
                break
            end
        end
    end
    return data[index]

end

function Class:showFirstCharge()
    local node = UI.child(self.node, "Page/cardFirstCharge")
    local itemsNode = UI.child(node, "Bottom/items")

    local deal = function()
        for i, v in ipairs(self.firstCharge.items) do
            self.firstCharge.items[i].icon = config.itemMap[v.id].icon
            self.firstCharge.items[i].fun = function()
                UI.showItemInfo(v.id)
            end
            self:showEffect(UI.child(itemsNode, i - 1), not v.gotten)
        end
    end

    local show = function()
        UI.draw(node, "Bottom", self.firstCharge)
        UI.enableOne(node, "Bottom/Btn", self.firstCharge.state >= 0 and 1 or 0)
        if self.firstCharge.state < 0 then
            local typeNode = UI.child(node, "Bottom/Btn/Type")
            for i = 1, 4 do
                local child = UI.child(typeNode, i - 1)
                local data = { btn = { Text = Tools.showChannelValue(self.firstCharge.price[i]),
                                       fun = function()
                                           ComTools.charge(self:getFirstChargeConfig(i), "firstCharge", i - 1, function()
                                               self.firstCharge = nil
                                               self:showFirstCharge()
                                               self:showRedDot()
                                           end)
                                       end },
                               get = { gold = self.firstCharge.price[i],
                                       gold3 = self.firstCharge.price[i] * 3 } }
                UI.draw(child, data)
                --log(data)
            end
        else
            UI.enableOne(node, "Bottom/Btn/Get", self.firstCharge.state)
            if self.firstCharge.state == 0 then
                UI.button(node, "Bottom/Btn/Get/Ack", function()
                    message:send("C2S_ReqGetFirstChargeItem", {}, function(ret)
                        if ret.code == "ok" then
                            Story.show({ heroID = self.firstCharge.hero, endFun = function()
                                ItemTools.showItemsResult(self.firstCharge.items)
                            end })
                        end
                        self.firstCharge = nil
                        self:showFirstCharge()
                        self:showRedDot()
                    end)
                end)
            end
        end
    end

    if self.firstCharge then
        show()
    else
        message:send("C2S_ReqFirstChargeInfo", {}, function(ret)
            self.firstCharge = ret
            --log(ret)
            deal()
            show()
        end)
    end
end

function Class:showContact()
    local crtSdk = SdkMgr.getCrtChannel()
    local slogan = UI.child(self.node, "Page/cardContact/Slogan")
    local node = UI.child(self.node, "Page/cardContact/Bottom/Btn")
    if is_debug then
        if crtSdk == ChannelEnum.GK then
            UI.enableOne(slogan, 0)
            UI.enable(node, true)
            UI.button(node, "BtnTG", function()
                CS.UnityEngine.Application.OpenURL("https://t.me/joinchat/Otb6Ahr_amvPO5zwUlgelA")
            end)
            UI.button(node, "BtnTD", function()
                CS.UnityEngine.Application.OpenURL("https://l.h-comic.org/iMxVdwjz")
            end)
        elseif crtSdk == ChannelEnum.H365 then
            UI.enableOne(slogan, 1)
            UI.enable(node, false)
            UI.button(slogan, "H365/Text", function()
                CS.UIAPI.copyToClipBoard(UI.getValue(slogan, "H365/Text"))
                UI.showHint("内容已拷贝到剪切板")
            end)
        elseif crtSdk == ChannelEnum.JGG then
            UI.button(node, "BtnDD", function()
                CS.UnityEngine.Application.OpenURL("https://discord.com/invite/7JX5P32Q6B")
            end)
        end
    else
        if crtSdk == ChannelEnum.GK then
            UI.button(node, "BtnDD", function()
                CS.UnityEngine.Application.OpenURL("https://l.h-comic.org/iMxVdwjz")
            end)
        elseif crtSdk == ChannelEnum.H365 then
            UI.button(slogan, "H365/Text", function()
                CS.UIAPI.copyToClipBoard(UI.getValue(slogan, "H365/Text"))
                UI.showHint("内容已拷贝到剪切板")
            end)
            UI.button(node, "BtnTG", function()
                CS.UnityEngine.Application.OpenURL("https://t.me/h365MIW")
            end)
        elseif crtSdk == ChannelEnum.JGG then
            UI.button(node, "BtnDD", function()
                CS.UnityEngine.Application.OpenURL("https://discord.com/invite/7JX5P32Q6B")
            end)
        end
    end
end

return Class