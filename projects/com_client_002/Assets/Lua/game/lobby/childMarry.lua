---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by DH.
--- DateTime: 2021/9/30 16:35
---
local Class = {
    res = "ui/childMarry"
}

function Class:addRedDot(addOrRemove)
    local btnRequest = UI.child(self.node, "Main/Bottom/BtnAsk")
    if addOrRemove then
        RedDot.registerBtn(btnRequest, RedDot.SystemID.DatingHouseMarryRequest, nil, -12, -12)
    else
        RedDot.unregisterBtn(btnRequest, RedDot.SystemID.DatingHouseMarryRequest)
    end
end

function Class:init()
    UI.enableOne(self.node, 0)

    self:close()
    self:button()
    self:addRedDot(true)

    self.items = {}
    self.childIndex = 1
    self.coupleIndex = 1

    message:send("C2S_UnMarriedChild", {}, function(res)
        self.childBase = res.childBase
        self.items[53] = res.item53
        self.items[54] = res.item54
        self.items[55] = res.item55
        self:showMain(1)
    end)
end

function Class:close()
    UI.button(self.node, "Main/Top/BtnClose", function()
        self:addRedDot(false)
        UI.close(self)
    end)

    UI.button(self.node, "Marry/Req/BtnBack", function()
        self:showMarryPage(0, false)
    end)
    UI.button(self.node, "Marry/Res/BtnBack", function()
        self:showMarryPage(1, false)
    end)
    UI.button(self.node, "Marry/Vip/BtnBack", function()
        self:showMarryPage(2, false)
    end)
    UI.button(self.node, "Marry/Ask/BtnBack", function()
        self:showMarryPage(3, false)
    end)
    UI.button(self.node, "Marry/Can/BtnBack", function()
        self:showMarryPage(4, false)
    end)
    UI.button(self.node, "Marry/Lce/BtnBack", function()
        self:showMarryPage(5, false)
    end)
end

function Class:showMarryPage(index, bool)
    local marryNode = UI.child(self.node, "Marry")
    if index == 4 then
        UI.enable(marryNode, index, bool)
    else
        UI.enable(marryNode, bool)
        UI.enableOne(marryNode, index)
    end
end

function Class:button()
    local marryBtn = UI.child(self.node, "Main/Top/Page/P1/Ways/Btn")

    UI.button(marryBtn, "Req", function()
        self:showMarryPage(0, true)
        self:showReq(self.childIndex)
    end)
    UI.button(marryBtn, "Res", function()
        self:showMarryPage(1, true)
        self:showRes(self.childIndex, 0)
    end)
    UI.button(marryBtn, "Vip", function()
        self:showMarryPage(2, true)
        self:showVip(self.childIndex)
    end)
    UI.button(self.node, "Main/Bottom/BtnAsk", function()
        self:showMarryPage(3, true)
        self:showAsk()
    end)

    for i = 1, 2 do
        UI.button(self.node, "Main/Bottom/Btn/Btn" .. i, function()
            self:showMain(i)
        end)
    end

    UI.button(self.node, "Main/Top/BtnHelp", function()
        showHelp("marry");
    end)

end

function Class:showMainSelect(index)
    for i = 1, 2 do
        UI.enable(self.node, "Main/Bottom/Btn/Btn" .. i .. "/Selected", i == index)
    end
end

function Class:showMain(index)
    self.index = index
    if index == 1 then
        self:showChild()
    else
        if self.coupleBase then
            self:showCouple()
        else
            message:send("C2S_MarriedChild", {}, function(res)
                self.coupleBase = res.m
                self:showCouple()
            end)
        end
    end
end

function Class:showChild()
    self:showMainSelect(1)
    UI.enableOne(self.node, "Main/Bottom/BG", 0)
    UI.enableOne(self.node, "Main/Top/Page", 0)
    local sNode = UI.child(self.node, "Main/Bottom/BG/s")
    if #self.childBase > 0 then
        UI.enableOne(self.node, "Main/Top/Page", 0)
        UI.enableOne(sNode, 0)
        self:showsVC()
        self:showP1(self.childIndex)
    else
        UI.enableAll(self.node, "Main/Top/Page", false)
        UI.enableOne(sNode, 1)
        UI.button(self.node, "Main/Bottom/BG/s/None/BtnChild", function()
            UI.openPage(UIPageName.School)
            UI.close(self)
        end)
    end
end

function Class:showsVC()
    local sVCNode = UI.child(self.node, "Main/Bottom/BG/s/V/C")
    UI.cloneChild(sVCNode, #self.childBase)

    for i, v in ipairs(self.childBase) do
        local child = UI.child(sVCNode, i - 1)
        UI.enable(child, "Selected", i == self.childIndex)
        local info = { name = self:setPurple(v.name, v.pic),
                       growName = self:setPurple(config.childGrow[v.qua].growName, v.pic),
                       grows = self:setPurple(v.attr, v.pic) }
        UI.draw(child, info)
        UI.button(child, function()
            self.childIndex = i
            self:showP1(self.childIndex)
            self:showsVC()
        end)
    end
end

function Class:showP1(index, bool)
    local node = UI.child(self.node, "Main/Top/Page/P1")
    local child = self.childBase[index]
    local data = { pic = child.pic,
                   Info = { name = child.name,
                            growName = config.childGrow[child.qua].growName,
                            wisdom = child.wisdom,
                            political = child.political,
                            momName = config.wife[child.momID].name,
                            grows = child.attr,
                            strength = child.strength,
                            charm = child.charm } }
    UI.draw(node, data)

    if not bool then
        CS.Sound.PlayOne("voice/childVoice" .. child.pic);
    end

    local stopAck = function(type)
        message:send("C2S_StopMarriage", { childID = child.id }, function(res)
            log(res)
            if res.code == "ok" then
                local item = self:getItem(child.qua, type)
                local str = "您的子嗣child提亲失败"
                str = string.gsub(str, "child", child.name, 1)
                UI.ShowTipReturnItem(str, item.id, item.cost)
                self:itemAck(item.id, item.cost)
                self:showP1(index, true)
            else
                UI.showHint("该子嗣已经联姻成功，无效终止")
                self:moveChild(index, res.married)
                self:showMain(self.index)
            end
        end)
    end

    local dealBeRefuse = function(msg)
        log(msg)
        if msg.code == "beRefuse" then
            for i, v in ipairs(self.childBase) do
                if v.id == msg.childId then
                    self.childBase[i].state = nil
                    local item = self:getItem(self.childBase[i].qua, true)
                    self:itemAck(item.id, item.cost)
                    if self.childIndex == i then
                        UI.enableOne(node, "Ways", 0)
                    end
                end
            end
        else
            for i, v in ipairs(self.childBase) do
                if v.id == msg.childId then
                    self:moveChild(i, msg.married)
                    self:showChild()
                end
            end
        end
    end

    local showInfo = function(res)
        if res.mentionMarriedTime > 0 then
            local countDown = math.abs(os.time() - res.mentionMarriedTime)
            UI.enableOne(node, "Ways", 1)
            UI.CountDown(node, "Ways/Msg/reqInfo/countDown", countDown, function()
                --ToDo
                log("还没写！急个锤子......")
                child.state = nil
                UI.enableOne(node, "Ways", 0)
            end, 3)
            if res.mentionMarriedUserID == 0 or res.mentionMarriedUserID == nil then
                UI.text(node, "Ways/Msg/reqInfo", "全服提亲中……");
                UI.button(node, "Ways/Msg/BtnStop", function()
                    stopAck()
                end)
            else
                UI.text(node, "Ways/Msg/reqInfo", "正在向 " .. res.mentionMarriedUser .. "提亲\n(编号" .. res.mentionMarriedUserID .. ")");
                message:setOnMsg("S2C_ClientMarry", dealBeRefuse)
                UI.button(node, "Ways/Msg/BtnStop", function()
                    stopAck(true)
                end)
            end
        else
            UI.enableOne(node, "Ways", 0)
        end
        if bool then
            self:showMarryPage(0, false)
        end
    end

    if child.state and not bool then
        showInfo(child.state)
    else
        message:send("C2S_YyChildState", { childID = child.id }, function(res)
            self.childBase[index].state = res
            showInfo(res)
        end)
    end
    self.oldIndex = index
end

function Class:deal(msg)
    log(msg)
    local node = UI.child(self.node, "Main/Top/Page/P1")
    local child = self.childBase[self.childIndex]
    if msg.code == "beRefuse" then
        child.state = nil
        UI.enableOne(node, "Ways", 0)
    else
        UI.showHint("已经结婚")
    end
end

function Class:setPurple(str, pic)
    local cfg = config.childConfigureMap[1].talentLevelFemale
    for i = 1, #cfg do
        if cfg[i] == pic then
            return "<color=#C472B9>" .. str .. "</color>"
        end
    end
    return str
end

function Class:getItem(qua, type)
    local cfg = type and config.childConfigureMap[1].talentMarrigeCost or config.childConfigureMap[1].talentMarketCost
    for i = 1, 6 do
        if i == qua then
            local id = cfg[2 * i - 1]
            local item = { id = id,
                           icon = config.itemMap[id].icon,
                           name = config.itemMap[id].name,
                           count = self.items[id],
                           cost = cfg[2 * i],
            }
            --log(item)
            return item
        end
    end
end

function Class:itemAck(id, cost, use)
    if use then
        if self.items[id] >= cost then
            self.items[id] = self.items[id] - cost
            return true
        else
            return false
        end
    else
        self.items[id] = self.items[id] + cost
    end
end

function Class:showCouple()
    self:showMainSelect(2)
    UI.enableOne(self.node, "Main/Bottom/BG", 1)
    UI.enableOne(self.node, "Main/Top/Page", 1)

    local SNode = UI.child(self.node, "Main/Bottom/BG/S")
    if #self.coupleBase > 0 then
        UI.enableOne(self.node, "Main/Top/Page", 1)
        UI.enableOne(SNode, 0)
        self:showSVC()
        self:showP2(self.coupleIndex)
    else
        UI.enableAll(self.node, "Main/Top/Page", false)
        UI.enableOne(SNode, 1)
    end
end

function Class:showSVC()
    local SVCNode = UI.child(self.node, "Main/Bottom/BG/S/V/C")
    UI.cloneChild(SVCNode, #self.coupleBase)
    for i, v in ipairs(self.coupleBase) do
        local child = UI.child(SVCNode, i - 1)
        UI.enable(child, "Selected", i == self.coupleIndex)
        local data = { gName = v.fName,
                       bName = v.mName,
                       gGrowName = v.fGrowName,
                       bGrowName = v.mGrowName,
                       gGrows = v.fAttr,
                       bGrows = v.mAttr,
                       marryDate = v.marriedTime,
                       marryGrows = v.uAttr,
                       pName = v.uName }
        UI.draw(child, data)
        UI.button(child, function()
            self.coupleIndex = i
            self:showP2(self.coupleIndex)
            self:showSVC()
        end)
    end
end

function Class:showP2(index)
    local node = UI.child(self.node, "Main/Top/Page/P2")
    local couple = self.coupleBase[index]
    local data = { gPic = couple.fPic,
                   bPic = couple.mPic }
    UI.draw(node, data)
end

function Class:showReq(index)
    local node = UI.child(self.node, "Marry/Req")
    local TG = UI.child(self.node, "Marry/Req/Bottom/TG")
    UI.SetToggleIsOn(TG, "t2")
    local child = self.childBase[index]
    local top = { gName = child.qua + 6,
                  pic = child.pic,
                  name = child.name,
                  parent = client.user.name,
                  grows = child.attr }
    UI.draw(node, "Top", top)

    local itemAck = function(type)
        local item = self:getItem(child.qua, type)
        local Item = { icon = item.icon,
                       Cost = { name = item.name,
                                count = item.cost },
                       Count = { count = item.count } }
        UI.draw(node, "Bottom/Item", Item)
        UI.refreshSVC(node, "Bottom/Item/Cost", true, true)
        UI.refreshSVC(node, "Bottom/Item/Count", true, true)
    end

    local reqAck = function(id)
        if not id then
            id = 0
        end
        message:send("C2S_Tiqin", { childID = child.id, uPlayerID = id }, function(res)
            if res.code == "ok" then
                local item = self:getItem(child.qua, id > 0)
                self:itemAck(item.id, item.cost, true)
                self:showP1(self.childIndex, true)
            else
                UI.showHint("对方用户不存在");
            end
        end)
    end

    local tgAck = function(type)
        local InPut = UI.child(self.node, "Marry/Req/Bottom/TG/t1/InputId")
        itemAck(type)
        if type then
            InPut:GetComponent(typeof(CS.UnityEngine.UI.InputField)).interactable = true
            UI.button(node, "Bottom/BtnReq", function()
                local id = UI.getValueInt(InPut)
                if id then
                    UI.text(InPut, "")
                    if string.len(id) == 8 then
                        if id == client.user.id then
                            UI.showHint("不能与自身联姻")
                            return
                        end
                        local item = self:getItem(child.qua, type)
                        if item.count < item.cost then
                            UI.showHint("道具不足，无法提亲")
                        else
                            reqAck(id)
                        end
                    else
                        UI.showHint("请输入正确的玩家ID")
                        return
                    end
                else
                    UI.showHint("请输入玩家ID")
                    return
                end
            end)
        else
            InPut:GetComponent(typeof(CS.UnityEngine.UI.InputField)).interactable = false
            UI.text(InPut, "")
            UI.button(node, "Bottom/BtnReq", function()
                local item = self:getItem(child.qua, type)
                if item.count < item.cost then
                    UI.showHint("道具不足，无法提亲")
                else
                    reqAck()
                end
            end)
        end
    end

    tgAck()

    UI.toggle(TG, "t1", function()
        tgAck(true)
    end)

    UI.toggle(TG, "t2", function()
        tgAck()
    end)
end

function Class:showRes(index, type)
    local node = UI.child(self.node, "Marry/Res")
    local child = self.childBase[index]
    local top = { gName = child.qua + 6,
                  pic = child.pic,
                  name = child.name,
                  parent = client.user.name,
                  growName = config.childGrow[child.qua].growName,
                  grows = child.attr }
    UI.draw(node, "Top", top)

    local S = UI.child(node, "S")
    UI.enable(S, false)
    local showSVC = function(type)
        message:send("C2S_ZhaoQin", { childID = child.id, ref = type }, function(res)
            UI.enable(S, true)
            if #res.info > 0 then
                UI.enableOne(S, 0)
                local SVCNode = UI.child(node, "S/V/C")
                UI.cloneChild(SVCNode, #res.info)
                for i, v in ipairs(res.info) do
                    local childNode = UI.child(SVCNode, i - 1)
                    local item = self:getItem(v.qua)
                    local childData = { gName = v.qua + 6,
                                        pic = v.pic,
                                        name = v.name,
                                        parent = v.fatherName,
                                        growName = config.childGrow[v.qua].growName,
                                        grows = v.attr,
                                        BtnMarry = function()
                                            self:marryAck(v, child, "res")
                                        end,
                                        icon = item.icon,
                                        cost = item.cost }
                    UI.draw(childNode, childData)
                end
            else
                UI.enableOne(S, 1)
            end
            UI.CountDown(node, "Bottom/countDown", res.time, function()
                self:showRes(self.childIndex, 0)
            end, 3)
        end)
    end

    showSVC(type)

    local item = self:getItem(child.qua)
    local costGold = config.childConfigureMap[1].zqRefSubGold
    local haveGold = client.user.gold
    local bottom = { gold = haveGold < costGold and UI.colorStr(costGold, ColorStr.red) or costGold,
                     icon = item.icon,
                     count = item.count }
    UI.draw(node, "Bottom", bottom)

    UI.button(node, "Bottom/BtnRefresh", function()

        UI.msgBox("是否花费" .. costGold .. "元宝立即刷新？", function()
            if haveGold < costGold then
                UI.showHint("元宝不足，可前往充值获得元宝")
            else
                showSVC(1)
            end
        end, function()
        end)
    end)
end

function Class:showVip(index)
    local node = UI.child(self.node, "Marry/Vip")
    local child = self.childBase[index]
    local top = { gName = child.qua + 6,
                  pic = child.pic,
                  name = child.name,
                  parent = client.user.name,
                  growName = config.childGrow[child.qua].growName,
                  grows = child.attr }
    UI.draw(node, "Top", top)

    local costGold = config.childConfigureMap[1].goldMarrigeCost[child.qua]
    local haveGold = client.user.gold
    local btnFun = function()
        if haveGold < costGold then
            UI.showHint("元宝不足，可前往充值获得元宝")
        elseif client.user.vip < config.childConfigureMap[1].VIP then
            UI.showHint("VIP等级不足")
        else
            message:send("C2S_Cihun", { childBase = child }, function(res)
                if res.code == "ok" then
                    self:showMarryPage(2, false)
                    self:moveChild(index, res.married)
                    self:showChild()
                    self:showLce(child, res.married)
                elseif res.code == "fail" then
                    UI.showHint("赐婚失败，请重试");
                elseif res.code == "error_noGold" then
                    UI.showHint("元宝不足");
                elseif res.code == "error_noVip" then
                    UI.showHint("vip等级不足");
                end
            end)
        end
    end
    local bottom = { growName = config.childGrow[child.qua].growName,
                     objGrowName = config.childGrow[child.qua < 6 and child.qua + 1 or child.qua].growName,
                     gold = haveGold < costGold and UI.colorStr(costGold, ColorStr.red) or costGold,
                     BtnVip = function()
                         btnFun()
                     end }
    UI.draw(node, "Bottom", bottom)
end

function Class:showAsk()
    local node = UI.child(self.node, "Marry/Ask")
    local items = { count53 = self.items[53],
                    count54 = self.items[54],
                    count55 = self.items[55] }
    UI.draw(node, "Items", items)

    local agreeMsg = function(state, obj)
        -- 同意或拒绝提亲：0 同意提亲 1拒绝提亲  2拒绝所有提亲
        message:send("C2S_AgreeTiqin", { info = obj, state = state }, function(res)
            if res.code == "ok" then
                if state == 1 then
                    self:showAsk()
                elseif state == 2 then
                    self:showAsk()
                    UI.showHint("已全部拒绝")
                end
            else
                self:showAsk()
                UI.showHint("玩家已取消提亲请求")
            end
        end)
    end

    local S = UI.child(node, "S")
    UI.enable(S, false)
    local showSVC = function(res)
        UI.enable(S, true)
        if #res > 0 then
            UI.enableOne(S, 0)
            local SVCNode = UI.child(node, "S/V/C")
            UI.cloneChild(SVCNode, #res)
            for i, v in ipairs(res) do
                local childNode = UI.child(SVCNode, i - 1)
                local childData = { pic = v.pic,
                                    name = v.name,
                                    parent = v.fatherName,
                                    growName = config.childGrow[v.qua].growName,
                                    grows = v.attr,
                                    BtnY = function()
                                        self:showCan(i)
                                    end,
                                    BtnN = function()
                                        agreeMsg(1, v)
                                    end }
                UI.draw(childNode, childData)
            end
        else
            UI.enableOne(S, 1)
        end
    end

    --if self.askObj then
    --    showSVC(self.askObj)
    --else
    message:send("C2S_ReqTiqin", { pageNum = 1 }, function(res)
        self.askObj = res.info
        showSVC(res.info)
    end)
    --end

    UI.button(node, "BtnRefuse", function()
        if self.askObj and #self.askObj > 0 then
            agreeMsg(2, self.askObj[1])
        else
            UI.showHint("暂无提亲请求")
        end
    end)

end

function Class:showCan(index)
    self:showMarryPage(4, true)
    local node = UI.child(self.node, "Marry/Can")
    local obj = self.askObj[index]
    local item = self:getItem(obj.qua, true)

    UI.draw(node, "Item", item)

    local S = UI.child(node, "S")
    UI.enable(S, false)
    local showSVC = function(res)
        UI.enable(S, true)
        if #res > 0 then
            UI.enableOne(S, 0)
            local SVCNode = UI.child(node, "S/V/C")
            UI.cloneChild(SVCNode, #res)
            for i, v in ipairs(res) do
                local childNode = UI.child(SVCNode, i - 1)
                local item = self:getItem(v.qua, true)
                local childData = { gName = v.qua + 6,
                                    pic = v.pic,
                                    name = v.name,
                                    parent = v.fatherName,
                                    growName = config.childGrow[v.qua].growName,
                                    grows = v.attr,
                                    BtnMarry = function()
                                        self:marryAck(obj, v, "ask")
                                    end,
                                    icon = item.icon,
                                    cost = item.cost }
                UI.draw(childNode, childData)
            end
        else
            UI.enableOne(S, 1)
        end
    end

    message:send("C2S_AgreeTiqin", { info = obj, state = 0 }, function(res)
        if res.code == "ok" then
            self.askObj[index].canMarry = res.info
            showSVC(res.info)
        else
            self:showMainSelect(3, true)
            self:showAsk()
            UI.showHint("玩家已取消提亲请求")
        end
    end)
    --end
end

function Class:showLce(child, res)
    self:showMarryPage(5, true)
    local node = UI.child(self.node, "Marry/Lce")
    local sex = 0
    local cfg = config.childConfigureMap[1].talentLevelMale
    for i, v in ipairs(cfg) do
        if child.pic == v then
            sex = 1
        end
    end
    log(res)
    local bottom = { gPic = res.fPic,
                     bPic = res.mPic,
                     gName = res.fName,
                     bName = res.mName,
                     gParent = sex > 0 and res.uName or client.user.name,
                     bParent = sex > 0 and client.user.name or res.uName,
                     gGrows = res.fAttr,
                     bGrows = res.mAttr,
                     allValue = sex > 0 and res.fAttr or res.mAttr }
    UI.draw(node, "Bottom", bottom)
end

function Class:marryAck(obj, child, type)
    --local child = self.childBase[self.childIndex]
    local item = self:getItem(obj.qua)
    if item.count < item.cost then
        UI.showHint("道具不足")
    else
        message:send("C2S_Married", { toChildInfo = obj, myChildInfo = child }, function(res)
            if res.code == "ok" then
                self:itemAck(item.id, item.cost, true)
                self:moveChild(self.childIndex, res.married)
                self:showChild()
                self:showLce(child, res.married)
            elseif res.code == "fail" then
                UI.showHint("联姻失败")
                if type == "res" then
                    self:showRes(self.childIndex, 2)
                elseif type == "ask" then
                    self:showMainSelect(3, true)
                    self:showAsk()
                end
            elseif res.code == "error_noItem" then
                UI.showHint("道具不足")
            end
        end)
    end
end

function Class:moveChild(index, couple)
    if self.childBase and #self.childBase >= index then
        table.remove(self.childBase, index)
        self.childIndex = self.childIndex < #self.childBase and self.childIndex or #self.childBase
    end
    if self.coupleBase then
        table.insert(self.coupleBase, couple)
        self.coupleIndex = #self.coupleBase
    end
end

return Class